<?php

// Convert to admin settings

define('OPEN_JOURNAL_PREFIX_PATH', 'journal');

define('OPEN_JOURNAL_SUB_LANG_ENABLE', TRUE);
define('OPEN_JOURNAL_SUB_LANG_CODE', 'th');
define('OPEN_JOURNAL_SUB_LANG_TEXT', 'ไทย');
define('OPEN_JOURNAL_SUB_LANG_ABSTRACT_LABEL', 'บทคัดย่อ');
define('OPEN_JOURNAL_SUB_LANG_KEYWORDS_LABEL', 'คำสำคัญ');

define('OPEN_JOURNAL_SUB_LANG_ABSTRACT_REQUIRED', TRUE);
define('OPEN_JOURNAL_SUB_LANG_KEYWORDS_REQUIRED', TRUE);
define('OPEN_JOURNAL_ABSTRACT_REQUIRED', TRUE);
define('OPEN_JOURNAL_KEYWORDS_REQUIRED', TRUE);


define('OPEN_JOURNAL_ABSTRACT_MAX_LENGTH', 500);
define('OPEN_JOURNAL_MAX_MULTI_TEXTFIELD', 10);


// Constant

define('OPEN_JOURNAL_ALLOWED_FILE_TYPE', 'doc docx');

define('OPEN_JOURNAL_STATUS_INFORMATION_APPROVE', 0);

function open_journal_menu() {

  $arg = count(explode('/', OPEN_JOURNAL_PREFIX_PATH));

  $items[OPEN_JOURNAL_PREFIX_PATH]	= array(
    'title' => t('Journal list'),
    'page callback' => 'open_journal_list',
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
  );

  $items[OPEN_JOURNAL_PREFIX_PATH.'/login'] = array(
    'title' => t('Login'),
    'page callback' => 'open_journal_login',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_login_form.inc',
  );

  $items[OPEN_JOURNAL_PREFIX_PATH.'/register'] = array(
    'title' => t('Register'),
    'page callback' => 'open_journal_register',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_register_form.inc',
  );  
  $items[OPEN_JOURNAL_PREFIX_PATH.'/account/setting'] = array(
    'title' => t('Setting my account'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('open_journal_account_setting_form'),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_account_setting_form.inc',
  );

  $items[OPEN_JOURNAL_PREFIX_PATH.'/add'] = array(
    'title' => t('Add new journal'),
    'page callback' => 'open_journal_information',
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_information_form.inc',
  );

  $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal/information'] = array(
    'title' => t('Edit journal'),
    'page callback' => 'open_journal_information',
    'page arguments' => array($arg),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_information_form.inc',
  ); 

  $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_overview/overview'] = array(
    'title' => t('Overview'),
    'page callback' => 'open_journal_overview',
    'page arguments' => array($arg),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_overview.inc',
  ); 

  $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal/discussion'] = array(
    'title' => t('Discussions'),
    'page callback' => 'open_journal_discussion',
    'page arguments' => array($arg),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_discussion_form.inc',
  ); 

  $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal/discussion/add'] = array(
    'title' => t('Add new discussion'),
    'page callback' => 'open_journal_discussion_add',
    'page arguments' => array($arg),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_discussion_form.inc',
  );

  $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal/discussion/%open_journal_discussion/edit'] = array(
    'title' => t('Edit discussion'),
    'page callback' => 'open_journal_discussion_add',
    'page arguments' => array($arg),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_discussion_form.inc',
  );  

  $items[OPEN_JOURNAL_PREFIX_PATH.'/%/file'] = array(
    'title' => t('Files'),
    'page callback' => 'open_journal_file',
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_file.inc',
  ); 

  $items[OPEN_JOURNAL_PREFIX_PATH.'/%/people'] = array(
    'title' => t('Peoples'),
    'page callback' => 'open_journal_people',
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_people_form.inc',
  ); 
  return $items;
}

function open_journal_theme() {

  return array(
    'open_journal_login' => array(
      'variables' => array(
        'form' => NULL,
        'condition' => NULL,
      ),
      'template' => 'templates/open-journal-login',
    ),

    'open_journal_register' => array(
      'variables' => array(
        'form' => NULL,
        'condition' => NULL,
      ),
      'template' => 'templates/open-journal-register',
    ),

    'open_journal_detail' => array(
      'variables' => array(
        'jid' => NULL,
        'content' => NULL,
      ),
      'template' => 'templates/open-journal-detail',
    ),

    'open_journal_overview_content' => array(
      'variables' => array(
        'jid' => NULL,
        'abstract' => NULL,
        'last_update' => NULL,
        'update_by' =>NULL,
        'latest_file' => NULL,
        'discussion_list' => NULL,
      ),
      'template' => 'templates/open-journal-overview-content',
    ),

    'open_journal_overview_sidebar' => array(
      'variables' => array(
        'jid' => NULL,
        'status'=> NULL,
        'people_list'=> NULL,
        'information'=> NULL,
      ),
      'template' => 'templates/open-journal-overview-sidebar',
    ),

    'open_journal_discussion' => array(
      'variables' => array(
        'jid' => NULL,
        'discussion_list' => NULL,
      ),
      'template' => 'templates/open-journal-discussion',
    ),

    'open_journal_status_form' => array(
      'variables' => array(
        'jid' => NULL,
        'form' => NULL,
      ),
      'template' => 'templates/open-journal-status-form',
    ),

    'open_journal_file' => array(
      'variables' => array(
        'jid' => NULL,
        'file_list' => NULL,
      ),
      'template' => 'templates/open-journal-file',
    ),

    'open_journal_people' => array(
      'variables' => array(
        'jid' => NULL,
        'people_creator_list' => NULL,
        'people_contributor_list' => NULL,
      ),
      'template' => 'templates/open-journal-people',
    ),

    'open_journal_list' => array(
      'variables' => array(
        'journal_list' => NULL,
      ),
      'template' => 'templates/open-journal-list',
    ),

  );
}

function open_journal_permission() {
  return array(
    'access open journal' => array(
      'title' => t('Access open journal'),
      'description' => t('Perform user can lonin to join open journal.'),
    ),
    'update final url field' => array(
      'title' => t('Update final URL field'),
      'description' => t('Perform user can update URL field. Recommented for librarian role.'),
    ),
    'auto active when create journal' => array(
      'title' => t('Auto active when create journal'),
      'description' => t('Perform user force to active for review abstract first. Recommented for editor role.'),
    ),
    'access contributor process' => array(
      'title' => t('Access contributor process'),
      'description' => t('Perform user can see contributor real name, avatar and create contributor only discussion. Recommented for editor, reviewer, librarian roles.'),
    ),
  );
}

function open_journal_preprocess_html(&$vars) {
  if (user_is_logged_in()) {
    $vars['header_class'] = 'header-logged-in';
    $vars['logged_in'] = TRUE;
  }
  else {
    $vars['header_class'] = 'header-logged-out';
    $vars['logged_in'] = FALSE;
  }
  open_journal_preprocess_page($vars);
}

function open_journal_preprocess_page(&$vars) {

  $mpath = drupal_get_path('module', 'open_journal');

  if(in_array($_GET['q'], array(
      OPEN_JOURNAL_PREFIX_PATH.'/login', 
      OPEN_JOURNAL_PREFIX_PATH.'/register')
    ) || 
    (arg(0) == 'user' && arg(1) == 'reset')
  ) {
    // TODO: change to settings upload file
    $vars['open_journal_logo1'] = FALSE;
    $vars['open_journal_logo2'] = theme('image', array(
      'path' => $mpath.'/images/default_logo2.png',
      'alt' => variable_get('site_name', ''),
    ));
    $vars['disabled_title'] = TRUE;
    $vars['page_class'] = 'page-sign';
  }
  else {

    $vars['open_journal_logo1'] = theme('image', array(
      'path' => $mpath.'/images/default_logo1.png',
      'alt' => variable_get('site_name', ''),
    ));
    $vars['open_journal_logo2'] = FALSE;
    $vars['disabled_title'] = FALSE;
    $vars['page_class'] = 'page-normal';

    if ($_GET['q'] == OPEN_JOURNAL_PREFIX_PATH || $_GET['q'] == OPEN_JOURNAL_PREFIX_PATH.'/list') {
      $vars['page_class'] = 'page-normal page-journal-list';
    }

  }
  
}

function open_journal_login() {
  drupal_add_js(drupal_get_path('module','open_journal').'/js/open_journal_compact.js');
  return theme('open_journal_login', array(
    'form' => drupal_render(drupal_get_form('open_journal_login_form')),
    'condition' => 'CONDITION',
  ));
}

function open_journal_register() {
  drupal_add_js(drupal_get_path('module','open_journal').'/js/open_journal_compact.js');
  return theme('open_journal_register', array(
    'form' => drupal_render(drupal_get_form('open_journal_register_form')),
    'condition' => 'CONDITION',
  ));
}

function open_journal_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  if (!isset($_GET['destination'])) {
    drupal_goto(OPEN_JOURNAL_PREFIX_PATH.'/account/setting');
  }
}

function open_journal_form_user_admin_settings_alter(&$form, &$form_state) {
  // reorder fieldset weights
  $form['anonymous_settings']['#weight'] = -4;
  $form['admin_role']['#weight'] = -3;
  $form['registration_cancellation']['#weight'] = -2;
  $form['nocurrent_pass_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Require Current Password'),
    '#weight' => -1,
  );
  $form['nocurrent_pass_settings']['nocurrent_pass_disabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Do not require current password'),
    '#description' => t('Check this box to disable the "current password" field on the User Edit form.'),
    '#default_value' => variable_get('nocurrent_pass_disabled', TRUE),
  );
}


function open_journal_update_field(&$data, $field_name, $field_value=NULL) {

  // Prepare variables
  $old_field_value = isset($data->{$field_name})? $data->{$field_name}: NULL;
  if (!$field_value) {
    $field_value = $old_field_value;
  }

  // Set variables
  if (is_array($field_value)) {
    $data->{$field_name} = implode(',', array_filter($field_value));
  }
  else {
    $data->{$field_name} = $field_value;
  }
}

function open_journal_get_field($data, $field_name, $default_value=NULL) {
  return isset($data->{$field_name})? $data->{$field_name}: $default_value;
}


/**
 * Journal method
 */
function open_journal_journal_load($jid) {

  // Query data from database for edit journal when have journal ID
  $data = db_select('open_journal_journal', 'j')
  ->fields('j')
  ->condition('jid', $jid, '=')
  ->execute()
  ->fetchObject();

  $data->subject_sub = explode(',' ,$data->subject_sub);
  $data->subject_en = explode(',' ,$data->subject_en);
  $data->dc_creator = explode(',' ,$data->dc_creator);
  $data->dc_publisher = explode(',' ,$data->dc_publisher);
  $data->dc_contributor = explode(',' ,$data->dc_contributor);

  $data->title = $data->dc_title;

  return $data;
}

function open_journal_overview_load($jid) {

  // Query data from database for edit journal when have journal ID
  $data = db_select('open_journal_journal', 'j')
  ->fields('j')
  ->condition('jid', $jid, '=')
  ->execute()
  ->fetchObject();

  $data->title = $data->dc_title;

  return $data;
}

function open_journal_journal_save($data, $change_status=FALSE) {
  
  if (empty($data->created)) {
    $data->created = REQUEST_TIME;
  }

  $data->changed = REQUEST_TIME;

  if ($change_status || empty($data->status_changed)) {
    $data->status_changed = REQUEST_TIME;
  }

  open_journal_update_field($data, 'subject_en');
  open_journal_update_field($data, 'subject_sub');

  // Dublin core
  open_journal_update_field($data, 'dc_description', $data->description_sub.','.$data->description_en);
  open_journal_update_field($data, 'dc_subject', $data->subject_sub.','.$data->subject_en);
  open_journal_update_field($data, 'dc_creator');
  open_journal_update_field($data, 'dc_publisher');
  open_journal_update_field($data, 'dc_contributor');

  if (is_array($data->date)) {
    $date = (object) $data->date;
    open_journal_update_field($data, 'dc_date', mktime(0, 0, 0, $date->month, $date->day, $date->year));
  }
  else {
    open_journal_update_field($data, 'dc_date');
  }

  if (isset($data->file) && $data->file) {
    $file = file_load($data->file);
    $data->dc_format = $file->filemime;
  }
  
  // Importantly, save record before save file.
  $pk = (isset($data->jid) && $data->jid)? 'jid': array();

  $jid = drupal_write_record('open_journal_journal', $data, $pk);
  
  if (isset($data->file) && $data->file) {
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
  }
  
  // When create first
  if (!$pk) {

    // Active auto user
    if(user_access('auto active when create journal')) {

      $user_auto_active_list = db_query("SELECT uid FROM users_roles ur, role_permission rp WHERE rp.permission = 'auto active when create journal' AND rp.rid = ur.rid")->fetchAllKeyed(0,0);

      foreach ($user_auto_active_list as $uid) {
        open_journal_journal_people_active($data->jid, $uid);
      }
    }

    // create first discussion.
    $discussion = array(
      'uid' => $data->uid,
      'jid' => $data->jid,
      'title' => t('New journal has been created.'),
      'description' => 'Submit new journal has been completed. Now, status is "information review".'."\n\n".'See information with abstract field and journal file on "Information" tab.'."\n".url('journal/'.$data->jid.'/information', array('absolute' => TRUE)),
      'fid' => $data->file,
      'contributor_only' => 0,
      'created' => $data->created,
      'permanent' => 1
    );
    $discussion = (object) $discussion;
    open_journal_discussion_save($discussion);

  }


  return $data;

}

/**
 * Journal people method
 */
function open_journal_journal_people_active($jid, $uid) {
  $data = (object) array(
    'joined' => REQUEST_TIME,
    'jid' => $jid,
    'uid' => $uid,
  );
  drupal_write_record('open_journal_journal_people', $data);
}


/**
 * Discussion method
 */
function open_journal_discussion_load($did) {

  // Query data from database for edit journal when have journal ID
  $data = db_select('open_journal_discussion', 'd')
  ->fields('d')
  ->condition('did', $did, '=')
  ->execute()
  ->fetchObject();

  return $data;
}

function open_journal_discussion_get_last($jid) {

  // Query data from database from discussion for display last updated and last file.
  $data = db_select('open_journal_discussion', 'd')
  ->fields('d')
  ->condition('jid', $jid, '=')
  ->condition('fid', 0, '!=')
  ->range(0,1)
  ->orderBy('did', 'DESC')
  ->execute()
  ->fetchObject();

  return $data;
}


function open_journal_discussion_load_limit($jid, $limit=NULL) {

  // Query data from database for overview discussion
  $data = db_select('open_journal_discussion', 'd')
  ->fields('d')
  ->condition('jid', $jid, '=')
  ->orderBy('did', 'DESC')
  ->range(0,$limit)
  ->execute()
  ->fetchAll();

  return $data;
}

function open_journal_discussion_load_all($jid) {

  // Query data from database for overview discussion
  $data = db_select('open_journal_discussion', 'd')
  ->fields('d')
  ->condition('jid', $jid, '=')
  ->orderBy('did', 'DESC')
  ->execute()
  ->fetchAll();

  return $data;
}


function open_journal_get_people_list($jid) {
  // Query data from database for display people list
  $data = db_select('open_journal_journal_people', 'p')
  ->fields('p')
  ->condition('jid', $jid, '=')
  ->orderBy('jid', 'DESC')
  ->execute()
  ->fetchAll();

  return $data;
}

function open_journal_discussion_save($data) {
  
  if (empty($data->created)) {
    $data->created = REQUEST_TIME;
  }

  $data->changed = REQUEST_TIME;


  if ($data->fid) {
    $file = file_load($data->fid);
  }
  
  // Importantly, save record before save file.
  $pk = (isset($data->did) && $data->did)? 'did': array();

  drupal_write_record('open_journal_discussion', $data, $pk);
  
  if ($data->fid) {
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
  }
  
  $data->is_new = !$pk;
  open_jounal_discussion_mail($data);

  return $data;
}

function open_journal_mail($key, &$message, $data) {

  $site_name = variable_get('site_name', t('E-Journal'));

  switch ($key) {
    case 'open_journal_discussion_add':
      //$message['subject'] = '['.truncate_utf8($data->journal->title, 10, FALSE, TRUE).']'.$data->title;
      $message['subject'] = truncate_utf8($data->journal->title, 20, FALSE, TRUE).' - '.$data->title;

      $body = "\n";
      $body .= "\n".'Journal: '.$data->journal->title;
      $body .= "\n".'------------------------------------------------------------------------';
      $body .= "\n";
      if ($data->is_new) {
      $body .= "\n".'Start discussion by : '.$data->sender->name;
      }
      else {
      $body .= "\n".'Update discussion by : '.$data->sender->name;
      }
      $body .= "\n".'Title: '.$data->title;
      $body .= "\n".'------------------------------------------------------------------------';
      $body .= "\n";
      $body .= "\n".$data->description;
      $body .= "\n";
      $body .= "\n".'------------------------------------------------------------------------';
      $body .= "\n".'View more detail on '.$site_name.': ';
      $body .= "\n".url(OPEN_JOURNAL_PREFIX_PATH.'/'.$data->journal->jid.'/discussion/'.$data->did, array('absolute' => TRUE));


      $message['body'][] = $body;
  }
}

// Send mail function 
function open_jounal_discussion_mail($data) {
  
  $user_list = open_journal_people_active_list($data->jid, $data->uid);
  $sender = user_load($data->uid);
  $data->journal = open_journal_journal_load($data->jid);
  $data->sender = $sender;

  foreach ($user_list as $user) {
    // TODO: check valid name for permission to dee the sender name
    drupal_mail('open_journal', 'open_journal_discussion_add', $user->mail, language_default(), $data, $sender->name.' <'.variable_get('site_mail', ini_get('sendmail_from')).'>');
  }

} 

/**
 * People method
 */
function open_journal_people_active_list($jid, $exclude=array()) {
    $exclude = !is_array($exclude)? array($exclude): $exclude;
  
    $user_list = db_select('open_journal_journal_people', 'jp')
    ->fields('jp', array('uid'))
    ->condition('jid', $jid, '=')
    ->execute()
    ->fetchAllKeyed(0, 0);
    
    $user_list = array_values($user_list);
    $user_list = array_diff($user_list, $exclude);
    
    return user_load_multiple($user_list);
}


function open_journal_information($data=NULL) {

  $mpath = drupal_get_path('module', 'open_journal');
  drupal_add_js($mpath.'/js/open_journal_multi_textfield.js');
  drupal_add_js(drupal_get_path('module','open_journal').'/js/jquery.qtip.min.js');
  drupal_add_js(drupal_get_path('module','open_journal').'/js/open_journal_help.js');
  

  return theme('open_journal_detail', array(
    'content' => drupal_render(drupal_get_form('open_journal_information_form',$data)),
    'sidebar' => '',
    'jid' => open_journal_get_field($data, 'jid'),
  ));
}

function open_journal_overview($data) {

  // get data from last discussion
  $data_d = open_journal_discussion_get_last($data->jid);

  // get data from discussion limit for display overview page
  $limit_overview_page = 3;
  $discussion = open_journal_discussion_load_limit($data->jid, $limit_overview_page);
  // Prepare data send to theme 
  $discussion_data = array();
  $i = 0;
  foreach($discussion as $row) {
    $user = user_load($row->uid);
    $file = file_load($user->picture->fid);
    $discussion_data[$i]['user_image'] = open_journal_display_user_image($user, $file);
    $discussion_data[$i]['title'] = truncate_utf8($row->title, 20, '' ,'...' ,'');
    $discussion_data[$i]['description'] = truncate_utf8($row->description, 100, '' ,'...' ,'');
    $discussion_data[$i]['url'] = '';
    $discussion_data[$i]['jid'] = $data->jid;
    $i++;
  }
  // calculate total more link to discussion journal
  $more_discussion = count(open_journal_discussion_load_all($data->jid))-$limit_overview_page;
  // get user and file data
  $user = user_load($data_d->uid);
  $file = file_load($data_d->fid);
  $status = array(
    'name' => 'Information Approve Dummy',
    'updated' => date('d M Y', $data->status_changed),
    'created' => date('d M Y', $data->created),
  );
  // Prepare people list  send to theme
  $people = open_journal_get_people_list($data->jid);
  $people_list = array();
  $i = 0;
  foreach($people as $row) {
    $user_p = user_load($row->uid);
    $file_p = file_load($user_p->picture->fid);
    $people_list[$i]['user_image'] = open_journal_display_user_image($user_p, $file_p);
    $i++;
  }


  open_journal_display_user_image($user, $file);
  if(OPEN_JOURNAL_SUB_LANG_ENABLE) {
    $abstract = $data->description_sub;
  }
  else {
    $abstract = $data->description_en;
  }
  return theme('open_journal_detail', array(
    'content' => theme('open_journal_overview_content', array(
      'jid' => 1,
      'abstract' => $abstract,
      'last_update' => date('d M Y', $data_d->created),
      'update_by' => $user->name,
      'latest_file' => file_create_url($file->uri),
      'discussion_data' => $discussion_data,
      'more_discussion' => $more_discussion,
      )
    ),
    'sidebar' => theme('open_journal_overview_sidebar', array(
      'jid' => 1,
      'status' => $status,
      'people_list'=> $people_list,
      'information'=> $data,
      )
    ),
    'jid' => 1
  ));
}

function open_journal_discussion() {
  return theme('open_journal_detail', array(
    'content' => drupal_render(drupal_get_form('open_journal_discussion_form')),
    'sidebar' => theme('open_journal_status_form', array('jid' => 1)),
    'jid' => 1
  ));
}

function open_journal_discussion_add($journal) {
  open_journal_get_display_user_info( $GLOBALS['user']);
  return theme('open_journal_detail', array(
    'content' => drupal_render(drupal_get_form('open_journal_discussion_form', $journal)),
    'sidebar' => theme('open_journal_status_form', array('jid' => 1)),
    'jid' => 1
  ));
}

function open_journal_file() {
  return theme('open_journal_detail', array(
    'content' => theme('open_journal_file'),
    'jid' => 1
  ));
}

function open_journal_people() {
  return theme('open_journal_detail', array(
    'content' => theme('open_journal_people'),
    'jid' => 1
  ));
}

function open_journal_list() {
  drupal_set_title('');
  return theme('open_journal_list', array(
    'journal_list' => array(),
  ));
}

function open_journal_image_default_styles() {
  $styles = array();

  $styles['open_journal_avatar_small'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 32,
          'height' => 32,
        ),
        'weight' => 0,
      ),
    ),
  );
  $styles['open_journal_avatar_medium'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 40,
          'height' => 40,
        ),
        'weight' => 0,
      ),
    ),
  );
  $styles['open_journal_avatar_large'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 73,
          'height' => 73,
        ),
        'weight' => 0,
      ),
    ),
  );
  return $styles;
}

function open_journal_display_user_image($user, $file ) {
  $data = array(
    'image_url' => file_create_url($file->uri),
    'user' => $user->name,
  );
 
  return $data;

}

function open_journal_get_display_user_info($account, $image_style='open_journal_avatar_medium') {

  $image_style = image_style_load($image_style);
  
  $size = array();
  if ($width = $image_style['effects'][0]['data']['width']) {
    $size[] = $width;
  }
  if ($height = $image_style['effects'][0]['data']['height']) {
    $size[] = $height;
  }
  $size = min($size);
  
  
  // Prepare name and picture to display
  $dummy_name = $account->name;
  $dummy_picture = theme('image', array(
    'path' => 'http://www.gravatar.com/avatar/1'.$account->uid.'?d=identicon&f=y&size='.$size,
    'width' => $size,
    'height' => $size,
    'alt' => $dummy_name,
    'title' => $dummy_name,
  ));
    
  if (!$account->picture) {
    $real_picture = $dummy_picture;
  }
  else {
    
    $picture = file_load(is_numeric($account->picture)? $account->picture: $account->picture->fid);
        
    $real_picture = $dummy_picture = theme('image_style', array(
      'style_name' => $image_style['name'],
      'path' => $picture->uri,
      'width' => $size,
      'height' => $size,
      'alt' => $dummy_name,
      'title' => $dummy_name,
    ));
  }
  
  $real_name = '';
  if (isset($account->data['firstname']) && $account->data['firstname']) {
    $real_name .= $account->data['firstname'];
  }
  
  if (isset($account->data['lastname']) && $account->data['lastname'] && $real_name) {
    $real_name .= ' '.truncate_utf8($account->data['lastname'], 1).'.';
  }
  elseif (isset($account->data['lastname']) && $account->data['lastname'] && !$real_name) {
    $real_name .= $account->data['lastname'];
  }
  else {
    $real_name .= dummy_name;
  }
  
  
  // Prepare info to return
  $info_real = array(
    'display_picture' => $real_picture,
    'display_name' => $real_name,
  );
  $info_dummy = array(
    'display_picture' => $dummy_picture,
    'display_name' => $dummy_name,
  );
  
  
  // Check before return
  global $user;
  
  // Editor
  if (user_access('auto active when create journal')) {
    $info = $info_real;
  }    
  // Reviewer and librarian
  elseif (user_access('access contributor process') && !user_access('auto active when create journal')) {
    if (user_access('access contributor process', $account)) {
      $info = $info_real;
    }
    else {
      $info = $info_dummy;
    }
  }
  // Researcher
  else {
    if ($user->uid == $account->uid) {
      $info = $info_real;
    }
    else {
      $info = $info_dummy;
    }
  }
    
  return $info;

}
