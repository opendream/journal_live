<?php

// Convert to admin settings

define('OPEN_JOURNAL_PREFIX_PATH', 'journal');

define('OPEN_JOURNAL_LANG_FULL_TEXT', 'eng.');
define('OPEN_JOURNAL_SUB_LANG_ENABLE', TRUE);
define('OPEN_JOURNAL_SUB_LANG_CODE', 'th');
define('OPEN_JOURNAL_SUB_LANG_TEXT', 'th');
define('OPEN_JOURNAL_SUB_LANG_FULL_TEXT', 'thai');

define('OPEN_JOURNAL_SUB_LANG_TITLE_LABEL', 'Title (thai)');
define('OPEN_JOURNAL_SUB_LANG_ABSTRACT_LABEL', 'Abstract (thai)');
define('OPEN_JOURNAL_SUB_LANG_KEYWORDS_LABEL', 'Keywords (thai)');
define('OPEN_JOURNAL_SUB_LANG_AUTHOR_LABEL', 'Author (thai)');

define('OPEN_JOURNAL_DEFAULT_PUBLISHER_NAME', 'Health Systems Research Institute');

define('OPEN_JOURNAL_SUB_LANG_ABSTRACT_REQUIRED', TRUE);
define('OPEN_JOURNAL_SUB_LANG_KEYWORDS_REQUIRED', TRUE);
define('OPEN_JOURNAL_ABSTRACT_REQUIRED', TRUE);
define('OPEN_JOURNAL_KEYWORDS_REQUIRED', TRUE);


define('OPEN_JOURNAL_ABSTRACT_MAX_LENGTH', 2000);
define('OPEN_JOURNAL_MAX_MULTI_TEXTFIELD', 20);


// Constant

define('OPEN_JOURNAL_ALLOWED_FILE_TYPE', 'doc docx');
define('OPEN_JOURNAL_ALLOWED_FINAL_STATUS_FILE_TYPE', 'doc docx pdf');


// Status
define('OPEN_JOURNAL_STATUS_INFORMATION_APPROVE', 0);
define('OPEN_JOURNAL_STATUS_DOCUMENT_APPROVE', 1);
define('OPEN_JOURNAL_STATUS_CATLOGUED', 2);
define('OPEN_JOURNAL_STATUS_PUBLISHED', 3);

define('OPEN_JOURNAL_DISPLAY_IMAGE_USER_LIST_LIMIT', 9);
define('OPEN_JOURNAL_LIST_IPP', 20);

define('OPEN_JOURNAL_REMINDER_DAYS', 15);



define('OPEN_JOURNAL_STATUS_INFORMATON_APPROVE_KEY', 0);

define('OPEN_JOUNAL_STATUS', serialize (
  array(
    OPEN_JOURNAL_STATUS_INFORMATON_APPROVE_KEY => 'Information review',
    OPEN_JOURNAL_STATUS_DOCUMENT_APPROVE => 'Document review',
    OPEN_JOURNAL_STATUS_CATLOGUED => 'Library catalogue',
    OPEN_JOURNAL_STATUS_PUBLISHED => 'Publication',
  )
));

define('OPEN_JOURNAL_INFORMAL_STATUS_REVIEWING', 0);
define('OPEN_JOURNAL_INFORMAL_STATUS_AGREE', 1);
define('OPEN_JOURNAL_INFORMAL_STATUS_FAIL', 2);

define('OPEN_JOUNAL_INFORMAL_STATUS', serialize (
  array(
    OPEN_JOURNAL_INFORMAL_STATUS_REVIEWING => 'Reviewing',
    OPEN_JOURNAL_INFORMAL_STATUS_FAIL => 'No',
  )
));

define('OPEN_JOUNAL_HELP_DESCRIPTION_SUB', 'สรุปบทความโดยสังเขป');




/**
 * Implements of hook_menu().
 */
function open_journal_menu() {
  
  $path = drupal_get_path('module', 'open_journal');
  require_once($path .'/includes/open_journal_report.inc');

  $arg = count(explode('/', OPEN_JOURNAL_PREFIX_PATH));

  $items[OPEN_JOURNAL_PREFIX_PATH]  = array(
    'title' => t('Article list'),
    'page callback' => 'open_journal_list',
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
  );
  $items[OPEN_JOURNAL_PREFIX_PATH.'/list']     = $items[OPEN_JOURNAL_PREFIX_PATH];
  //$items[OPEN_JOURNAL_PREFIX_PATH.'/list/all'] = $items[OPEN_JOURNAL_PREFIX_PATH];

  $items[OPEN_JOURNAL_PREFIX_PATH.'/list/%']  = array(
    'title' => t('Article list'),
    'page callback' => 'open_journal_list',
    'page arguments' => array($arg+1),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
  );

  $items[OPEN_JOURNAL_PREFIX_PATH.'/list/%/%/%']  = array(
    'title' => t('Article list'),
    'page callback' => 'open_journal_list',
    'page arguments' => array($arg+1, $arg+2, $arg+3),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
  );

  $items[OPEN_JOURNAL_PREFIX_PATH.'/autocomplete/%'] = array(
    'page callback' => 'open_journal_list_autocomplete',
    'page arguments' => array(2),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
  );

  $items[OPEN_JOURNAL_PREFIX_PATH.'/login'] = array(
    'title' => t('Login'),
    'page callback' => 'open_journal_login',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_login_form.inc',
  );

  $items[OPEN_JOURNAL_PREFIX_PATH.'/register'] = array(
    'title' => t('Register'),
    'page callback' => 'open_journal_register',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_register_form.inc',
  );
  $items[OPEN_JOURNAL_PREFIX_PATH.'/account/setting'] = array(
    'title' => t('Setting my account'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('open_journal_account_setting_form'),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_account_setting_form.inc',
  );
  $items[OPEN_JOURNAL_PREFIX_PATH.'/account/switch-role/%user_role'] = array(
    'title' => t('Switch role'),
    'page callback' => 'open_journal_account_switch_role',
    'page arguments' => array($arg+2),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_account_switch_role.inc',
  );


  $items[OPEN_JOURNAL_PREFIX_PATH.'/add'] = array(
    'title' => t('Add new article'),
    'page callback' => 'open_journal_information',
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_information_form.inc',
  );

  $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal/information'] = array(
    'title' => t('Edit journal'),
    'page callback' => 'open_journal_information',
    'page arguments' => array($arg),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_information_form.inc',
  );

  $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal/overview'] = array(
    'title' => t('Overview'),
    'page callback' => 'open_journal_overview',
    'page arguments' => array($arg),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_overview.inc',
  );
  $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal'] = $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal/overview'];

  $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal/discussion'] = array(
    'title' => t('Discussions'),
    'page callback' => 'open_journal_discussion_list',
    'page arguments' => array($arg),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_status_form.inc'
  );
  $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal/discussion/list'] = $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal/discussion'];

  $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal/discussion/add'] = array(
    'title' => t('Add new discussion'),
    'page callback' => 'open_journal_discussion_add',
    'page arguments' => array($arg),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_discussion_form.inc',
  );

  $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal/discussion/%open_journal_discussion'] = array(
    'title' => t('Discussion detail'),
    'page callback' => 'open_journal_discussion_detail',
    'page arguments' => array($arg, $arg+2),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_comment_form.inc',
  );

  $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal/discussion/%open_journal_discussion/edit'] = array(
    'title' => t('Edit discussion'),
    'page callback' => 'open_journal_discussion_edit',
    'page arguments' => array($arg, $arg+2),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_discussion_form.inc',
  );

  $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal/discussion/%open_journal_discussion/delete'] = array(
    'title' => t('Delete discussion'),
    'page callback' => 'open_journal_discussion_delete',
    'page arguments' => array($arg, $arg+2),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_discussion_form.inc',
  );

  $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal/discussion/%open_journal_discussion/comment/%open_journal_comment/edit'] = array(
    'title' => t('Edit comment'),
    'page callback' => 'open_journal_comment_edit',
    'page arguments' => array($arg, $arg+2, $arg+4),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_comment_form.inc',
  );

  $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal/discussion/%open_journal_discussion/comment/%open_journal_comment/delete'] = array(
    'title' => t('Delete comment'),
    'page callback' => 'open_journal_comment_delete',
    'page arguments' => array($arg, $arg+2, $arg+4),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_comment_form.inc',
  );

  $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal/update-state'] = array(
    'title' => t('Update state'),
    'page callback' => 'open_journal_update_state',
    'page arguments' => array($arg),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_status_form.inc',
  );

  $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal/approve-by-timer'] = array(
    'title' => t('Approve by Timer'),
    'page callback' => 'open_journal_approve_by_timer',
    'page arguments' => array($arg),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_status_form.inc',
  );

  $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal/reject-state'] = array(
    'title' => t('Update state'),
    'page callback' => 'open_journal_reject_state',
    'page arguments' => array($arg),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_status_form.inc',
  );

  $items[OPEN_JOURNAL_PREFIX_PATH.'/timeout-check'] = array(
    'title' => t('Update state'),
    'page callback' => 'open_journal_timeout_check',
    'page arguments' => array($arg),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_status_form.inc',
  );


  $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal/file'] = array(
    'title' => t('Files'),
    'page callback' => 'open_journal_file',
    'page arguments' => array($arg),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_file.inc',
  );

  $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal/people'] = array(
    'title' => t('People'),
    'page callback' => 'open_journal_people',
    'page arguments' => array($arg),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_people_form.inc',
  );
  $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal/people/add'] = array(
    'title' => t('Create people'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('open_journal_people_create_form', $arg),
    'access arguments' => array('invite people to journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_people_form.inc',

  );

  $items[OPEN_JOURNAL_PREFIX_PATH.'/account/%user'] = array(
    'title' => t('Account'),
    'page callback' => 'open_journal_account',
    'page arguments' => array($arg+1),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
  );

  $items['open_journal/avatar/%/%'] = array(
    'page callback' => 'open_journal_avatar_generate',
    'page arguments' => array(2, 3),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/identicon.inc',
  );

  $items[OPEN_JOURNAL_PREFIX_PATH.'/ojs/export'] = array(
    'title' => t('Export Issues'),
    'page callback' => 'open_journal_ojs_export',
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_ojs_export.inc',
  );

  $items[OPEN_JOURNAL_PREFIX_PATH.'/autocomplete/%'] = array(
    'page callback' => 'open_journal_list_autocomplete',
    'page arguments' => array(2),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
  );
  /*
  $items['issue'] = array(
    'title' => 'My Issue',
    'page callback' => 'open_journal_issue_overview',
    'access arguments' => array('create update delete issue'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_issue.inc',
  );
  */
  
  // Report
  $items[OPEN_JOURNAL_PREFIX_PATH.'/report'] = array(
    'page callback' => 'open_journal_report_list',
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_report.inc',

  );

  foreach (open_journal_report_data() as $value) {
    $items[$value['url']] = array(
      'title' => $value['title'],
      'page callback' => $value['callback'],
      'access arguments' => array('access open journal'),
      'type' => MENU_CALLBACK,
      'file' => 'includes/open_journal_report.inc',
    );
  }

  // Issue paths.
  $items['issue'] = array(
    'title' => 'All issues',
    'page callback' => 'open_journal_issue_list',
    'access arguments' => array('create update delete issue'),
    'file' => 'includes/open_journal_issue.inc',
  );

  $items['issue/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['issue/add'] = array(
    'page callback' => 'open_journal_issue_add',
    'access arguments' => array('create update delete issue'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_issue.inc',
  );

  $items['issue/%open_journal_issue'] = array(
    'page callback' => 'open_journal_issue_view',
    'page arguments' => array(1),
    'access arguments' => array('create update delete issue'),
    'file' => 'includes/open_journal_issue.inc',
  );

  $items['issue/%open_journal_issue/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['issue/%open_journal_issue/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'open_journal_issue_edit',
    'page arguments' => array(1),
    'access arguments' => array('create update delete issue'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/open_journal_issue.inc',
    'weight' => -9,
  );

  $items['issue/%open_journal_issue/delete'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('open_journal_issue_delete_confirm', 1),
    'access arguments' => array('create update delete issue'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_issue.inc',
  );

  $items[OPEN_JOURNAL_PREFIX_PATH.'/feed'] = array(
    'title' => t('Export Issues'),
    'page arguments' => array(2),
    'page callback' => 'open_journal_feed_generator',
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_ojs_export.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function open_journal_theme() {

  return array(
    'open_journal_login' => array(
      'variables' => array(
        'form' => NULL,
        'condition' => NULL,
      ),
      'template' => 'templates/open-journal-login',
    ),

    'open_journal_register' => array(
      'variables' => array(
        'form' => NULL,
        'condition' => NULL,
      ),
      'template' => 'templates/open-journal-register',
    ),

    'open_journal_detail' => array(
      'variables' => array(
        'jid' => NULL,
        'content' => NULL,
        'sidebar' => NULL,
        'menu_active_url' => NULL,
      ),
      'template' => 'templates/open-journal-detail',
    ),

    'open_journal_discussion_item' => array(
      'variables' => array(
        'item' => NULL,
        'journal' => NULL,
      ),
      'template' => 'templates/open-journal-discussion-item',
    ),

    'open_journal_comment_item' => array(
      'variables' => array(
        'item' => NULL,
        'journal' => NULL,
        'discussion' => NULL,
      ),
      'template' => 'templates/open-journal-comment-item',
    ),

    'open_journal_overview_content' => array(
      'variables' => array(
        'jid' => NULL,
        'abstract' => NULL,
        'last_update' => NULL,
        'update_by' =>NULL,
        'latest_file' => NULL,
        'discussion_list' => NULL,
      ),
      'template' => 'templates/open-journal-overview-content',
    ),

    'open_journal_overview_sidebar' => array(
      'variables' => array(
        'jid' => NULL,
        'status'=> NULL,
        'people_list'=> NULL,
        'information'=> NULL,
      ),
      'template' => 'templates/open-journal-overview-sidebar',
    ),

    'open_journal_discussion_detail' => array(
      'variables' => array(
        'jid' => NULL,
        'discussion_list' => NULL,
      ),
      'template' => 'templates/open-journal-discussion-detail',
    ),

    'open_journal_file' => array(
      'variables' => array(
        'journal' => NULL,
        'file_list' => array(),
      ),
      'template' => 'templates/open-journal-file',
    ),

    'open_journal_people' => array(
      'variables' => array(
        'jid' => NULL,
        'people_creator' => NULL,
        'people_contributor_list' => NULL,
      ),
      'template' => 'templates/open-journal-people',
    ),

    'open_journal_list' => array(
      'variables' => array(
        'journal_list' => NULL,
      ),
      'template' => 'templates/open-journal-list',
    ),

    'open_journal_list_item' => array(
      'variables' => array(
        'limit_start' => NULL,
        'limit_end' => NULL,
      ),
      'template' => 'templates/open-journal-list-item',
    ),
    'open_journal_discussion_list' =>array(
      'variables' => array(
        'discussion_list' => NULL,
        'file' => NULL
      ),
      'template' => 'templates/open-journal-discussion-list'
    ),
    'open_journal_status_form' =>array(
      'variables' => array(
        'journal' => NULL,
      ),
      'template' => 'templates/open-journal-status-form'
    ),
    'open_journal_informal_approve_form' =>array(
      'variables' => array(
        'journal' => NULL,
      ),
      'template' => 'templates/open-journal-informal-approve-form'
    ),
    'open_journal_dowload_reviewer_form' =>array(
      'variables' => array(
        'journal' => NULL,
      ),
      'template' => 'templates/open-journal-dowload-reviewer-form'
    ),

    // Report
    'open_journal_report_list' => array(
      'variables' => array(
        'content' => NULL,
        'form' => NULL,
      ),
      'template' => 'templates/open-journal-report-list'
    ),

    // Issue
    'open_journal_issue_sections_form' => array(
      'render element' => 'form',
      'path' => drupal_get_path('module', 'open_journal') .'/includes',
    ),
    'open_journal_account' =>array(
      'variables' => array(
        'account' => NULL,
      ),
      'template' => 'templates/open-journal-account'
    ),
    'open_journal_issue_journals_form' => array(
      'render element' => 'form',
      'path' => drupal_get_path('module', 'open_journal') .'/includes',
    ),
    'open_journal_download_file_sidebar' =>array(
      'variables' => array(
        'journal' => NULL,
      ),
      'template' => 'templates/open-journal-download-file-sidebar'
    ),


  );
}

/**
 * Implements hook_permission().
 */
function open_journal_permission() {

  $status_list = open_journal_get_status_list(TRUE);
  $phase2_permission = array();
  foreach ($status_list as $key => $value) {
    $permissoin_code = 'auto active '.$value['code'];
    $permissoin_title = 'Auto active when '.$value['name'];
    $permissoin_description = 'Auto active user when status change to '.$value['name'];
    $phase2_permission[$permissoin_code] = array (
      'title' => $permissoin_title,
      'description' => $permissoin_description,

    );
  }

  $phase2_permission['send email template'] = array(
    'title' => t('Send email template'),
    'description' => t('Choice for send email template'),
  );
  $phase2_permission['access select template'] = array(
    'title' => t('Access select template'),
    'description' => t('Access select template in discussion form'),
  );
  $phase2_permission['access select roles'] = array(
    'title' => t('Access select roles'),
    'description' => t('Access select roles in discussion form'),
  );

  $permission =  array(
    'access open journal' => array(
      'title' => t('Access open journal'),
      'description' => t('Perform user can lonin to join open journal.'),
    ),
    'auto active when create journal' => array(
      'title' => t('Auto active when create journal'),
      'description' => t('Perform user force to active for review abstract first. Recommented for editor role.'),
    ),
    'access contributor process' => array(
      'title' => t('Access contributor process'),
      'description' => t('Perform user can see contributor real name, avatar and create contributor only discussion. Recommented for editor, reviewer, librarian roles.'),
    ),
    'invite people to journal' => array(
      'title' => t('Invite people to journal'),
      'description' => t('Perform user can active and deactive people to journal. Recommented for editor and some reviewer roles.'),
    ),
    'approve with unanimity' => array(
      'title' => t('Approve with unanimity'),
      'description' => t('Perform user can change status of any journals and can see informal approved. Recommented for editor and librarian roles.'),
    ),
    'reject journal' => array(
      'title' => t('Reject journal'),
      'description' => t('Perform user can reject of any journals and can see informal approved. Recommented for editor role.'),
    ),
    'informal approve journal' => array(
      'title' => t('Informal approve journal'),
      'description' => t('Perform user can informal approve journal for that user only. Recommented for reviewer role.'),
    ),
    'receive daily reminder email' => array(
      'title' => t('Receive daily reminder email'),
      'description' => t('Allow people that active on article can receive email notification when article not active after '.OPEN_JOURNAL_REMINDER_DAYS.' days'),
    ),
    'can not view authors data' => array(
      'title' => t('Can not view authors data'),
      'description' => t('Specify user can not view author list and view last file only. Recommented for reviewer role'),
    ),


    // Backend permission
    'create update delete issue' => array(
      'title' => t('Create update delete issue'),
      'description' => t('Perform user can administrator issue. Recommented for webmaster role.'),
    ),
    'export issue to ojs xml format' => array(
      'title' => t('Export issue to OJS xml format'),
      'description' => t('Perform user can administrator OJS export. Recommented for webmaster role.'),
    ),
  );
  return $permission + $phase2_permission;
}

function open_journal_preprocess_html(&$vars) {


  if (user_is_logged_in() &&
      !(in_array($_GET['q'], array(
      OPEN_JOURNAL_PREFIX_PATH.'/login',
      OPEN_JOURNAL_PREFIX_PATH.'/register',
      'user/password')
    ) ||
    (arg(0) == 'user' && arg(1) == 'reset'))) {
    $vars['header_class'] = 'header-logged-in';
    $vars['logged_in'] = TRUE;
  }
  else {
    $vars['header_class'] = 'header-logged-out';
    $vars['logged_in'] = FALSE;
  }

  $vars['logo'] = theme_get_setting('default_logo')? '': theme_get_setting('logo_path');

  $vars['main_menu'] = menu_navigation_links('main-menu');

  open_journal_preprocess_page($vars);

}

function open_journal_preprocess_page(&$vars) {

  $mpath = drupal_get_path('module', 'open_journal');

  if(in_array($_GET['q'], array(
      OPEN_JOURNAL_PREFIX_PATH.'/login',
      OPEN_JOURNAL_PREFIX_PATH.'/register',
      'user/password')
    ) ||
    (arg(0) == 'user' && arg(1) == 'reset')
  ) {
    // TODO: change to settings upload file
    $vars['open_journal_logo1'] = FALSE;
    $vars['open_journal_logo2'] = theme('image', array(
      'path' => $mpath.'/images/default_logo2.png',
      'alt' => variable_get('site_name', ''),
    ));
    $vars['disabled_title'] = TRUE;
    $vars['page_class'] = 'page-sign';
  }
  else {
    $vars['open_journal_logo1'] = theme('image', array(
      'path' => $mpath.'/images/default_logo1.png',
      'alt' => variable_get('site_name', ''),
    ));
    $vars['open_journal_logo2'] = FALSE;
    $vars['disabled_title'] = FALSE;
    $vars['page_class'] = 'page-normal';

    $arg = count(explode('/', OPEN_JOURNAL_PREFIX_PATH));

    if ($_GET['q'] == OPEN_JOURNAL_PREFIX_PATH ||
        $_GET['q'] == OPEN_JOURNAL_PREFIX_PATH.'/list'  ||
        $_GET['q'] == OPEN_JOURNAL_PREFIX_PATH.'/list/all'  ||
        (strpos($_GET['q'], OPEN_JOURNAL_PREFIX_PATH) === 0 && is_numeric(arg($arg+1)))){
      $vars['page_class'] = 'page-normal page-journal-list';
    }

    if (strpos($_GET['q'], OPEN_JOURNAL_PREFIX_PATH) === 0 && is_numeric(arg($arg))) {
      $vars['journal'] = open_journal_journal_load(arg($arg));
    }

  }

  if (user_is_logged_in()) {
    global $user;

    $dummy = open_journal_get_display_user_info($user, array('image_style' => 'open_journal_avatar_small'));
    $vars['user_info'] = $dummy;
    $vars['user_info']['display_picture_small'] = $dummy['display_picture'];

    $dummy = open_journal_get_display_user_info($user, array('image_style' => 'open_journal_avatar_medium'));
    $vars['user_info']['display_picture_medium'] = $dummy['display_picture'];

    $dummy = open_journal_get_display_user_info($user, array('image_style' => 'open_journal_avatar_large'));
    $vars['user_info']['display_picture_large'] = $dummy['display_picture'];
  }

  // Issue
  $vars['outer_header'] = '';
  if (arg(0) == 'issue' && is_numeric(arg(1)) && (arg(2) == 'edit' || arg(2) == 'delete')) {
    $vars['outer_header'] = '<div class="back-to-all-issue">'.l('Issue detail', 'issue/'.arg(1).'/view').' · '.l('All issue', 'issue').'</div>';
  }
  elseif (arg(0) == 'issue' && is_numeric(arg(1))) {
    $vars['outer_header'] = '<div class="back-to-all-issue">'.l('Back to all issues', 'issue').'</div>';
  }
  elseif(arg(0) == 'issue' && !arg(1)) {
    $vars['outer_header'] = '<div class="back-to-all-issue">'.l('Add issue', 'issue/add', array('attributes' => array('class' => array('issue-add-link')))).'</div>';
  }
}

function open_journal_boot() {
  
  global $user;

  if ($user->uid && $_GET['q'] != OPEN_JOURNAL_PREFIX_PATH.'/account/switch-role') {

    

    $current_role = $user->data['current_role'];

    if (!$current_role) {
      $current_role = end(array_keys($user->roles));
    }
    
    if ($user->roles[$current_role]) {
      $user->roles = array(
        2 => 'authenticated user',
        $current_role => $user->roles[$current_role],
      );
    }
  
  }

}

function open_journal_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_pass') {
    $form['title'] = array('#markup' => '<h2>'.t('Forget password').'</h2>', '#weight' => -50);
    $form['#attached']['js'][] = drupal_get_path('module', 'open_journal').'/js/open_journal_compact.js';

  }
}

function open_journal_login() {

  $mpath = drupal_get_path('module', 'open_journal');

  $condition_list = array(l('For authors', $mpath.'/files/guideline-author.pdf'), l('For reviewers', $mpath.'/files/guideline-reviewer.pdf'));
  return theme('open_journal_login', array(
    'form' => drupal_render(drupal_get_form('open_journal_login_form')),
    'condition_list' => $condition_list,
  ));
}

function open_journal_register() {
  $condition_list = array('For Author', 'For Reviewer');
  return theme('open_journal_register', array(
    'form' => drupal_render(drupal_get_form('open_journal_register_form')),
    'condition_list' => $condition_list,
  ));
}

function open_journal_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  if (!isset($_GET['destination'])) {
    drupal_goto(OPEN_JOURNAL_PREFIX_PATH.'/account/setting');
  }
}

function open_journal_form_user_admin_settings_alter(&$form, &$form_state) {
  // reorder fieldset weights
  $form['anonymous_settings']['#weight'] = -4;
  $form['admin_role']['#weight'] = -3;
  $form['registration_cancellation']['#weight'] = -2;
  $form['nocurrent_pass_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Require Current Password'),
    '#weight' => -1,
  );
  $form['nocurrent_pass_settings']['nocurrent_pass_disabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Do not require current password'),
    '#description' => t('Check this box to disable the "current password" field on the User Edit form.'),
    '#default_value' => variable_get('nocurrent_pass_disabled', TRUE),
  );
}


function open_journal_update_field(&$data, $field_name, $field_value=NULL) {

  // Prepare variables
  $old_field_value = isset($data->{$field_name})? $data->{$field_name}: NULL;
  if (!$field_value) {
    $field_value = $old_field_value;
  }

  if (is_array($field_value)) {
    $data->{$field_name} = implode(',', array_filter($field_value));
  }
  else {
    $data->{$field_name} = $field_value;
  }


}

function open_journal_get_field($data, $field_name, $default_value=NULL) {
  return isset($data->{$field_name})? $data->{$field_name}: $default_value;
}


/**
 * Journal method
 */
function open_journal_journal_load($jid, $ignore_access=FALSE) {
  global $user;
  // check user access permission
  $can_access = FALSE;
  if(in_array('administrator', $user->roles)) {
    $can_access = TRUE;
  }
  else {
    $access_user_list = open_journal_people_active_list($jid);
    foreach ($access_user_list as  $access_user) {
      if($access_user->uid == $user->uid) {
        $can_access = TRUE;
      }
    }
  }

  // Query data from database for edit journal when have journal ID
  $data = db_select('open_journal_journal', 'j');
  $data->fields('j');
  $data->condition('jid', $jid, '=');

  $data = $data->execute();
  $data = $data->fetchObject();
  if(!$ignore_access && (!$can_access || empty($data))) {
    return 0;
  }

  $data->subject_sub = explode(',' ,$data->subject_sub);
  $data->subject_en = explode(',' ,$data->subject_en);
  $data->dc_publisher = explode(',' ,$data->dc_publisher);
  $data->dc_contributor = explode(',' ,$data->dc_contributor);
  $data->creator_sub = explode(',' ,$data->creator_sub);
  $data->creator_en = explode(',' ,$data->creator_en);
  $data->creator_email = explode(',' ,$data->creator_email);

  if (OPEN_JOURNAL_SUB_LANG_ENABLE && $data->dc_language != 'en') {
    $data->title = $data->title_sub? $data->title_sub: $data->title_en;
    $data->alt_title = $data->title_en? $data->title_en: $data->title_sub;
  }
  else {
    $data->title = $data->title_en? $data->title_en: $data->title_sub;
    $data->alt_title = $data->title_sub? $data->title_sub: $data->title_en;
  }

  if (OPEN_JOURNAL_SUB_LANG_ENABLE && $data->dc_language != 'en') {
    $data->creator = $data->creator_sub? $data->creator_sub: $data->creator_en;
  }
  else {
    $data->creator = $data->creator_en? $data->creator_en: $data->creator_sub;
  }


  return $data;
}

function open_journal_journal_save($data, $change_status=FALSE, $commit=TRUE, $silent=FALSE) {
  if(!$change_status) {
    $data->changed = REQUEST_TIME;
  }
  open_journal_update_field($data, 'subject_en');
  open_journal_update_field($data, 'subject_sub');

  open_journal_update_field($data, 'creator_en');
  open_journal_update_field($data, 'creator_sub');
  open_journal_update_field($data, 'creator_email');

  // Dublin core
  open_journal_update_field($data, 'dc_title', $data->title_sub.','.$data->title_en);
  open_journal_update_field($data, 'dc_description', $data->description_sub.','.$data->description_en);
  open_journal_update_field($data, 'dc_subject', $data->subject_sub.','.$data->subject_en);
  open_journal_update_field($data, 'dc_publisher');
  open_journal_update_field($data, 'dc_contributor');
  open_journal_update_field($data, 'dc_creator', $data->creator_sub.','.$data->creator_en);
  if (isset($data->date) && is_array($data->date)) {
    $date = (object) $data->date;
    open_journal_update_field($data, 'dc_date', mktime(0, 0, 0, $date->month, $date->day, $date->year));
  }
  else {
    open_journal_update_field($data, 'dc_date');
  }


  if (isset($data->file) && $data->file) {
    $file = file_load($data->file);
    if(!isset($data->dc_format)) {
     $data->dc_format = $file->filemime;
    }
  }

  // Importantly, save record before save file.
  $pk = (isset($data->jid) && $data->jid)? 'jid': array();

  if (!$pk) {
    $data->created = REQUEST_TIME;
    $data->changed = REQUEST_TIME;
    
    // generate journal code
    $current_year = date('y', REQUEST_TIME);
    $code = variable_get('open_journal_latest_code_'.$current_year, 0);
    $code++;
    $code = str_pad($code, 3, '0', STR_PAD_LEFT);
    $code = $current_year.'-'.$code;
    $data->code = $code;
  }
  if (!$pk || $change_status) {
    $data->status_changed = REQUEST_TIME;
  }

  if (OPEN_JOURNAL_SUB_LANG_ENABLE) {
    $data->title = $data->title_sub? $data->title_sub: $data->title_en;
  }
  else {
    $data->title = $data->title_en? $data->title_en: $data->title_sub;
  }

  if ($commit) {
    drupal_write_record('open_journal_journal', $data, $pk);
  }

  if (isset($data->file) && $data->file) {
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
  }

  if (!$pk || $change_status) {
    // Create journal state when status change
    $journal_state = array(
      'jid' => $data->jid,
      'sid' => $data->sid,
      'start_date' => REQUEST_TIME,
      'end_date' => NULL,
    );
    $journal_state = (object) $journal_state;
    open_journal_journal_state_save($journal_state);

    // Auto active people when status change
    global $user;
    open_journal_journal_people_active($data, $user->uid);
    open_journal_auto_active_people($data);
    if (!$silent) {
      open_journal_discussion_when_state_change($data);
    }
  }


  // When create first
  if (!$pk) {


    /*
    $user_auto_active_list = db_query("SELECT uid FROM users_roles ur, role_permission rp WHERE rp.permission = 'auto active when create journal' AND rp.rid = ur.rid")->fetchAllKeyed(0, 0);

    foreach ($user_auto_active_list as $uid) {
      if ($user->uid != $uid) {
        open_journal_journal_people_active($data, $uid);
      }
    }

    */
    /*
    // create first discussion.
    $discussion = array(
      'uid' => $data->uid,
      'jid' => $data->jid,
      'title' => t('New article has been created.'),
      'description' => 'Submission is now completed. Information is being reviewed.'."\n\n".'See information with abstract field and journal file on "Information" tab.'."\n".url('journal/'.$data->jid.'/information', array('absolute' => TRUE)),
      'fid' => $data->file,
      'permanent' => 1
    );

    // Get description from template mail setting
    $sql = "SELECT * FROM {open_journal_template} WHERE sid = :sid AND auto = :auto AND reject = :reject";
    $result = db_query($sql, array(':sid' => 0, ':auto' => 1, ':reject' => 0));
    $template_list = $result->fetchAll();
    open_journal_replace_template_string($template_list, $data);
    $discussion['description'] = $template_list[0]->body;

    $discussion['roles'] = array();
    $role_list = open_journal_get_template_role_list($template_list[0]->tpid);
    foreach ($role_list as $key => $value) {
      $discussion['roles'][] = $value->rid;
    }
    $discussion = (object) $discussion;
    open_journal_discussion_save($discussion, array('exclude_me' => FALSE));
    */

    // Todo rit1 send mail to co-author not create discussion
    // --- code ---


  }


  return $data;

}

function open_journal_auto_active_people($data) {
    global $user;
    // Get state code
    $sql = "SELECT code FROM {open_journal_state} WHERE sid = :sid";
    $result = db_query($sql, array(':sid' => $data->sid));
    $result = $result->fetchAll();
    $permission_name = 'auto active '.$result[0]->code;

    $user_auto_active_list = db_query("SELECT uid FROM users_roles ur, role_permission rp WHERE rp.permission = :permission_name AND rp.rid = ur.rid", array(':permission_name' => $permission_name))->fetchAllKeyed(0, 0);
    $user_active_list = open_journal_people_active_with_joined($data->jid);
    $user_active_array = array();
    foreach ($user_active_list as $key => $value) {
      $user_active_array[] = $value->uid;
    }
    foreach ($user_auto_active_list as $uid) {
      // Todo check alrady user actived
      if ($user->uid != $uid && !in_array($uid, $user_active_array)) {
        open_journal_journal_people_active($data, $uid);
      }
    }

}

/**
 * Journal people method
 */
function open_journal_account($account) {

  $account->user_info = open_journal_get_display_user_info($account, array('image_style' => 'open_journal_avatar_large'));
  $account->user_roles = open_journal_display_roles($account->roles);

  if (!$account->user_info['access account profile']) {
    return drupal_not_found();
  }

  return theme('open_journal_account', array(
    'account' => $account,
  ));

}
function open_journal_journal_people_active($journal, $uid, $status=1) {

  $journal = is_numeric($journal)? open_journal_journal_load($journal): $journal;

  // Roles for user
  $user = user_load($uid);
  $role_list = '';
  $i = 1;
  foreach ($user->roles as $key => $value) {
    if ($i != 1) {
      $role_list .= ', ';

    }
    $role_list .= $value;
    $i++;
  }


  $data = array(
    'created' => REQUEST_TIME,
    'jid' => $journal->jid,
    'uid' => $uid,
    'role_list' => $role_list,
    'status' => $status,
  );
  drupal_write_record('open_journal_journal_people', $data, array());
  /*
  db_merge('open_journal_journal_people')
    ->key(array(
      'jid' => $journal->jid,
      'uid' => $uid,
      'status' => $status,
    ))
    ->fields($data)
    ->execute();

  */

  $data = (object) $data;
  $data->journal = $journal;

  if ($status == 1) {
    open_journal_people_mail($data);

  }
}

function open_journal_journal_people_deactive($jid, $uid) {
  db_delete('open_journal_journal_people')
    ->condition('jid', $jid)
    ->condition('uid', $uid)
    ->execute();
}

function open_journal_people_mail($data) {

  global $user;

  $sender = $user;
  $reciver = user_load($data->uid);

  if ($sender->uid != $reciver->uid) {

    $sender_info = open_journal_get_display_user_info($sender, array('user' => $reciver));
    $sender->name = $sender_info['display_name_text'];

    $data->sender = $sender;
    $data->reciver = $reciver;

    drupal_mail('open_journal', 'open_journal_people_invite', $reciver->mail, language_default(), $data, $sender->name.' <'.variable_get('site_mail', ini_get('sendmail_from')).'>');
  }

}

/**
 * Discussion method
 */
function open_journal_discussion_load($did) {

  // Query data from database for edit journal when have journal ID
  $data = db_select('open_journal_discussion', 'd')
  ->fields('d')
  ->condition('did', $did, '=');

  if (!user_access('access contributor process')) {
    $data->condition('contributor_only', 0, '=');
  }

  return $data->execute()->fetchObject();
}



function open_journal_discussion_load_all($jid) {

  // Query data from database for overview discussion
  $data = db_select('open_journal_discussion', 'd')
  ->fields('d')
  ->condition('jid', $jid, '=')
  ->orderBy('changed', 'DESC');


  if (!user_access('access contributor process')) {
    $data->condition('contributor_only', 0, '=');
  }

  return $data->execute()->fetchAll();
}



function open_journal_journal_state_save($data) {

  // Create new journal state and update end date before state
  if ($data->sid != 0) {
    // Update before state
    // $before_sid = open_journal_before_sid($data->sid);

    // $sql = "SELECT jsid FROM {open_journal_journal_state} WHERE sid = :sid AND jid = :jid ORDER BY jsid DESC";
    // $result = db_query($sql, array(':sid' => $before_sid, ':jid' => $data->jid));
    // $result = $result->fetchAll();
    // $before_jsid = $result[0]->jsid;

    $now = REQUEST_TIME;
    $sql = "UPDATE {open_journal_journal_state} SET end_date = :now WHERE jid = :jid AND end_date IS NULL";
    db_query($sql, array(':now' => $now, ':jid' => $data->jid));

  }

  // Create new journal state
  if ($data->sid == open_journal_get_last_state()) {
    $data->end_date = $data->start_date;
  }
  $pk = (isset($data->jsid) && $data->jsid)? 'jsid': array();
  drupal_write_record('open_journal_journal_state', $data, $pk);

}

function open_journal_get_last_state() {
  $sql = "SELECT sid FROM {open_journal_state} WHERE next_sid IS NULL";
  $result = db_query($sql);
  $result = $result->fetchAll();
  return $result[0]->sid;
}

function open_journal_get_discussion_role($did) {
  $sql = "SELECT rid FROM {open_journal_discussion_role} WHERE did = :did";
  $result = db_query($sql, array(':did' => $did));
  $role_list = array();
  foreach ($result->fetchAll() as $key => $value) {
    $role_list[] = $value->rid;
  }
  return $role_list;
}

function open_journal_discussion_save($data, $params=array()) {

  $data->changed = REQUEST_TIME;

  // Default value
  $data->fid = isset($data->fid)? $data->fid: 0;
  $data->contributor_only = isset($data->contributor_only)? $data->contributor_only: 0;
  $data->permanent = isset($data->permanent)? $data->permanent: 0;

  global $user;
  $data->uid = isset($data->uid)? $data->uid: $user->uid;


  if ($data->fid) {
    $file = file_load($data->fid);
  }

  // Importantly, save record before save file.
  $pk = (isset($data->did) && $data->did)? 'did': array();

  if (!$pk) {
    $data->created = REQUEST_TIME;
  }

  if ($data->files_upload) {
    // Move file to directory and create fid
    $data->files_upload = open_journal_save_multiple_file($data->files_upload);

    // Attract link files to discussion
    $data->description .= "\n"."\n"."Files upload:";
    foreach ($data->files_upload as $key => $value) {
      $data->description.= "\n".l($value->filename, file_create_url($value->uri), array('absolute' => TRUE));

    }
  }

  drupal_write_record('open_journal_discussion', $data, $pk);

  if ($data->files_upload) {
    foreach ($data->files_upload as $key => $value) {
      // Map file and discussion
      open_journal_discussion_file_save($data->did, $value->fid);
    }
  }

  if ($data->fid) {
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
    file_usage_add($file, 'open_journal', 'discussion', $data->did);

  }



  $data->is_new = !$pk;

  // Create discussion role
  if (isset($data->roles)) {

    // Clear old discussion role when edit discussion role
    $sql = "DELETE FROM {open_journal_discussion_role} WHERE did = :did";
    db_query($sql, array(':did' => $data->did));

    foreach ($data->roles as $key => $value) {
      if ($value) {
        open_journal_discussion_role_save($data->did, $value);
      }
    }

  }


  if ($data->is_new) {
    open_jounal_discussion_mail($data, $params);
  }

  // Auto app state when state has flag approve_by_upload
  $journal = open_journal_journal_load($data->jid);
  $state = db_query("SELECT * FROM {open_journal_state} WHERE sid = :sid", array(':sid' => $journal->sid))->fetchObject();
  if (($data->files_upload || $data->fid) && $state->upload_auto_approve) {
    $next_sid= open_journal_next_sid($journal->sid, TRUE);
    open_journal_approve_submit($journal->jid, $next_sid, NULL, NULL, array(), FALSE);
  }

  return $data;
}

function open_journal_save_multiple_file($files) {
  $saved_files = array();
  $scheme = 'public://journal/'; // Change to "public://" if you want to move to public files folder.
  foreach ($files as $uploaded_file) {
    if ($uploaded_file['status'] == 'done') {
      $source = $uploaded_file['tmppath'];
      $destination = file_stream_wrapper_uri_normalize($scheme . $uploaded_file['name']);
      $destination = file_unmanaged_move($source, $destination, FILE_EXISTS_RENAME);
      $file = plupload_file_uri_to_object($destination);
      file_save($file);
      // Check the $file object to see if all necessary properties are set. Otherwise, use file_load($file->fid) to populate all of them.
      // $file = file_load($file->fid);
      $saved_files[] = $file;
    }
  }

  return $saved_files;
}

function open_journal_discussion_role_save($did, $rid) {
  $data = array(
    'did' => $did,
    'rid' => $rid
  );
  $data = (object) $data;
  drupal_write_record('open_journal_discussion_role', $data, array());
}

function open_journal_discussion_file_save($did, $fid) {
  $data = array(
    'did' => $did,
    'fid' => $fid
  );
  $data = (object) $data;
  drupal_write_record('open_journal_discussion_file', $data, array());
}

function open_journal_people_active_role_list($data, $exclude_roles_me=TRUE) {

    global $user;
    $role_list = array();
    $roles = $data->roles;
    $jid = $data->jid;

    foreach ($roles as $key => $value) {
      if ($value) {

        if ($exclude_roles_me) {
          if (!isset($user->roles[$value])) {
            $role_list[] = $value;
          }
        }
        else {
          $role_list[] = $value;
        }
      }
    }

    if (!empty($role_list)) {

      $sql = 'SELECT DISTINCT(ur.uid) FROM {users_roles} ur INNER JOIN {open_journal_journal_people} jp ON jp.uid = ur.uid WHERE ur.rid IN (:rids) AND jp.jid = :jid';
      $result = db_query($sql, array(':rids' => $role_list, ':jid' => $jid));
      $uids = $result->fetchCol();

    }
    else {
      $uids = array();
    }

    $user_list = user_load_multiple($uids);
    return $user_list;

}
// Send mail function
function open_jounal_discussion_mail($data, $params=array()) {

  $sender = user_load($data->uid);
  $data->journal = open_journal_journal_load($data->jid, TRUE);

  // New logic send mail when select roles in discussion form
  if (!empty($data->roles)) {
    if (isset($params['exclude_roles_me'])) {
      $user_list = open_journal_people_active_role_list($data, $params['exclude_roles_me']);
    }
    else {
      $user_list = open_journal_people_active_role_list($data);

    }
  }
  else {
    $user_list = open_journal_people_active_list($data->jid, $data->uid);
  }

  $org_name = $sender->name;

  foreach ($user_list as $reciver) {

    $sender->name = $org_name;
    $sender_info = open_journal_get_display_user_info($sender, array('user' => $reciver));
    $sender->name = $sender_info['display_name_text'];

    // Replate sender name
    if ($data->auto == 1) {
      $sender->name = 'E-Journal';
    }
    else {
      $sender->name = open_journal_replace_sender_name($sender);
    }

    $data->sender = $sender;
    $data->reciver = $reciver;
    if (!$data->contributor_only || user_access('access contributor process', $reciver)) {


      drupal_mail('open_journal', 'open_journal_discussion_add', $reciver->mail, language_default(), $data, $sender->name.' <'.variable_get('site_mail', ini_get('sendmail_from')).'>');
    }
  }

}

/**
 * Replace sender name to role
 */
function open_journal_replace_sender_name($sender) {
  foreach ($sender->roles as $key => $value) {
    $sender_name = $value;
  }
  return $sender_name;
}

/**
 * Comment method
 */
function open_journal_comment_load($cid) {

  // Query data from database for edit journal when have journal ID
  $data = db_select('open_journal_comment', 'c')
  ->fields('c')
  ->condition('cid', $cid, '=')
  ->execute()
  ->fetchObject();

  return $data;
}

function open_journal_comment_load_all($did) {

  // Query data from database for overview discussion
  $data = db_select('open_journal_comment', 'c')
  ->fields('c')
  ->condition('did', $did, '=')
  ->orderBy('cid', 'ASC')
  ->execute()
  ->fetchAll();

  return $data;
}

function open_journal_comment_save($data) {

  $data->changed = REQUEST_TIME;


  if ($data->fid) {
    $file = file_load($data->fid);
  }

  // Importantly, save record before save file.
  $pk = (isset($data->cid) && $data->cid)? 'cid': array();

  if (!$pk) {
    $data->created = REQUEST_TIME;
  }

  drupal_write_record('open_journal_comment', $data, $pk);
  $discussion = open_journal_discussion_load($data->did);
  open_journal_discussion_save($discussion);

  if ($data->fid) {
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
    file_usage_add($file, 'open_journal', 'comment', $data->cid);

  }

  $data->is_new = !$pk;
  if ($data->is_new) {
    open_jounal_comment_mail($data);
  }

    // Auto app state when state has flag approve_by_upload
  $journal = $data->journal;
  $state = db_query("SELECT * FROM {open_journal_state} WHERE sid = :sid", array(':sid' => $journal->sid))->fetchObject();
  if (($data->files_upload || $data->fid) && $state->upload_auto_approve) {
    $next_sid= open_journal_next_sid($journal->sid, TRUE);
    open_journal_approve_submit($journal->jid, $next_sid, NULL, NULL, array(), FALSE);
  }


  return $data;
}

function open_jounal_comment_mail($data) {
  global $user;
  $sender = user_load($data->uid);
  $data->discussion = open_journal_discussion_load($data->did);
  $data->journal = open_journal_journal_load($data->discussion->jid, TRUE);

  $user_list = open_journal_people_active_role_list($data);

  $org_name = $sender->name;
  foreach ($user_list as $reciver) {

    $sender->name = $org_name;
    $sender_info = open_journal_get_display_user_info($sender, array('user' => $reciver));
    $sender->name = $sender_info['display_name_text'];

    // Replate sender name
    if ($data->discussion->auto == 1) {
      $sender->name = 'System';
    }
    else {
      $sender->name = open_journal_replace_sender_name($sender);
    }

    $data->sender = $sender;
    $data->reciver = $reciver;

    if (!$data->discussion->contributor_only || user_access('access contributor process', $reciver)) {
      drupal_mail('open_journal', 'open_journal_comment_add', $reciver->mail, language_default(), $data, $sender->name.' <'.variable_get('site_mail', ini_get('sendmail_from')).'>');
    }
  }

}

/**
 * Mail method
 */
function open_journal_mail($key, &$message, $data) {

  //$site_name = variable_get('site_name', t('E-Journal'));
  $site_name = t('E-Journal');

  switch ($key) {
    case 'open_journal_discussion_add':
      //$message['subject'] = '['.truncate_utf8($data->journal->title, 10, FALSE, TRUE).']'.$data->title;
      $message['subject'] = '['.$site_name.'] '.open_journal_trim($data->title).' - '.open_journal_trim($data->journal->title, 20);

      //$body = "\n";
      //$body .= "\n".'Article: '.$data->journal->title;
      //$body .= "\n".'------------------------------------------------------------------------';
      //$body .= "\n";
      if ($data->is_new) {
      //$body .= "\n".'Discussion was initialed by '.$data->sender->name;
      }
      else {
      //$body .= "\n".'Update discussion by : '.$data->sender->name;
      }
      //$body .= "\n".'Title: '.open_journal_trim($data->title);
      if (open_journal_trim($data->description)) {
        $body .= "\n";
        $body .= "\n".$data->description;
        $body .= "\n";
      }
      $body .= "\n".'------------------------------------------------------------------------';
      $body .= "\n".'More details on link below.';

      if (isset($data->auto) && $data->auto == 1) {
        $body .= "\n".url(OPEN_JOURNAL_PREFIX_PATH.'/'.$data->journal->jid.'/discussion', array('absolute' => TRUE));
      }
      else {
        $body .= "\n".url(OPEN_JOURNAL_PREFIX_PATH.'/'.$data->journal->jid.'/discussion/'.$data->did, array('absolute' => TRUE));
      }


      $message['body'][] = $body;

      break;

    case 'open_journal_comment_add':

      $message['subject'] = '['.$site_name.'] '.'Re: '.open_journal_trim($data->discussion->title).' - '.open_journal_trim($data->journal->title, 20);

      $body = "\n";
      $body .= "\n".'Article: '.$data->journal->title;
      $body .= "\n";
      $body .= "\n".'Re: '.$data->discussion->title;
      $body .= "\n".'------------------------------------------------------------------------';
      $body .= "\n";
      $body .= "\n".$data->sender->name.': '.$data->message;
      $body .= "\n";
      $body .= "\n".'------------------------------------------------------------------------';
      $body .= "\n".'View more detail on link below.';
      $body .= "\n".url(OPEN_JOURNAL_PREFIX_PATH.'/'.$data->journal->jid.'/discussion/'.$data->did, array('absolute' => TRUE));


      $message['body'][] = $body;

      break;

    case 'open_journal_people_invite':

      $message['subject'] = '['.$site_name.'] '."A new submission : ".open_journal_trim($data->journal->title, 20);

      $body = "\n";
      $body .= "\n"."You're invited to initiate the reviewing process the article.";
      $body .= "\n";
      $body .= "\n"."Kindly send us your comments in tree weeks.";
      $body .= "\n";
      $body .= "\n".'To review the article, please click following link.';
      $body .= "\n".url(OPEN_JOURNAL_PREFIX_PATH.'/'.$data->journal->jid, array('absolute' => TRUE));

      $message['body'][] = $body;

      break;

    case 'open_journal_issue_published':

      $message['subject'] = '['.$site_name.'] '.open_journal_trim($data->journal->title, 20).' was published on issue '.open_journal_trim($data->issue->title, 20);

      $body = "\n";
      $body .= "\n".'Article: '.$data->journal->title;
      $body .= "\n".'------------------------------------------------------------------------';
      $body .= "\n";
      $body .= "\n".'Your article was published.';
      $body .= "\n".'Issue title: '.open_journal_trim($data->issue->title);
      $body .= "\n";
      $body .= "\n".'------------------------------------------------------------------------';
      $body .= "\n".'More details on link below.';
      $body .= "\n".url(OPEN_JOURNAL_PREFIX_PATH.'/'.$data->journal->jid, array('absolute' => TRUE));

      $message['body'][] = $body;

      break;

    case 'open_journal_reminder_daily':

      $message['subject'] = '['.$site_name.'] '.'Reminder for article '. open_journal_trim($data->journal->title, 20);

      $body = "\n";
      $body .= "\n".'Article: '.$data->journal->title;
      $body .= "\n".'------------------------------------------------------------------------';
      $body .= "\n";
      $body .= "\n".'The article was not update in '.OPEN_JOURNAL_REMINDER_DAYS.' days ago.';
      $body .= "\n".'Please, check the article and response peoples related to active on the article.';
      $body .= "\n";
      $body .= "\n".'------------------------------------------------------------------------';
      $body .= "\n".'More details on link below.';
      $body .= "\n".url(OPEN_JOURNAL_PREFIX_PATH.'/'.$data->journal->jid, array('absolute' => TRUE));

      $message['body'][] = $body;

      break;
  }

  global $conf;
  if (isset($conf['debug']) && $conf['debug']) {
    drupal_set_message('Debug email: '.$data->sender->name.' send '.$key.' to '.$data->reciver->name);
  }

}


/**
 * People method
 */
function open_journal_people_active_list($jid, $exclude=array() , $uid=FALSE, $limit=FALSE) {
  global $user;
  $exclude = !is_array($exclude)? array($exclude): $exclude;

  $user_list = db_select('open_journal_journal_people', 'jp');
  $user_list->fields('jp', array('uid'));
  $user_list->condition('jid', $jid, '=');
  $user_list->condition('uid', 1, '<>');
  if($uid) {
    $user_list->orderBy('uid = '.$uid, 'DESC');
  }
  $user_list->orderBy(' uid = '.$user->uid, 'DESC');

  if($limit) {
    $user_list->range(0, $limit);
  }
  $user_list = $user_list->execute();

  $user_list = $user_list->fetchAllKeyed(0, 0);

  $user_list = array_values($user_list);
  $user_list_raw = $user_list;
  $user_list = array_diff($user_list, $exclude);
  $user_list = array_values(user_load_multiple($user_list));

  $user_list_uid = array();
  foreach ($user_list as $account) {
    $user_list_uid[$account->uid] = $account->uid;
  }

  foreach ($user_list_raw as $uid) {
    if (!isset($user_list_uid[$uid])) {
      $user_list[] = NULL;
    }
  }

  return $user_list;
}

function open_journal_people_active_with_joined($jid) {
  /*
  $user_list = db_select('open_journal_journal_people', 'jp');
  $user_list->fields('jp', array('uid', 'created'));
  $user_list->condition('jid', $jid, '=');
  $user_list->condition('status', 1, '=');
  $user_list = $user_list->execute();
  $user_list = $user_list->fetchAll();
  */

  /*
  $sql = "SELECT jp1.uid as uid, jp1.created as created FROM open_journal_journal_people jp1 WHERE jp1.jid = :jid AND jp1.status = :status_active AND jp1.uid NOT IN (SELECT jp2.uid FROM open_journal_journal_people jp2 WHERE jp2.uid = jp1.uid AND jp2.jid = :jid AND jp2.status = :status_deactive AND jp2.created > jp1.created)";
  $result = db_query($sql, array(':jid' => $jid, 'status_active' => 1, 'status_deactive' => 0));
  */
  $sql = "SELECT jp1.uid uid , jp1.status status,  jp1.created created
          FROM {open_journal_journal_people} jp1
          WHERE jp1.jid = :jid AND jp1.created =
            (SELECT MAX(jp2.created)
            FROM {open_journal_journal_people} jp2
            WHERE jp2.uid = jp1.uid AND jp1.jid = jp2.jid
            GROUP BY jp2.uid)";

  $result = db_query($sql, array(':jid' => $jid));
  $user_list = $result->fetchAll();
  foreach ($user_list as $key => $value) {
    if ($value->status != 1) {
      unset($user_list[$key]);
    }
  }
  return $user_list;
}

function open_journal_people_contributor_list($journal) {

  $user_contributor_list = db_query(
   "SELECT
      DISTINCT(uid)
    FROM
      users_roles ur, role_permission rp
    WHERE
      (
        rp.permission = 'access contributor process' OR
        rp.permission = 'auto active when create journal' OR
        rp.permission = 'approve with unanimity and reject journal' OR
        rp.permission = 'informal approve journal'
      ) AND
      rp.rid = ur.rid")->fetchAllKeyed(0, 0);

  foreach ($user_contributor_list as $key => $uid) {
    if ($journal->uid == $uid) {
      unset($user_contributor_list[$key]);
    }
  }

  return array_values(user_load_multiple($user_contributor_list));

}

function open_journal_people_informal_approve_list($journal) {

  /*
  $sql =
    "SELECT
        DISTINCT ur.uid, jp.informal_approve_status
      FROM
        users_roles ur
      INNER JOIN
        role_permission rp
      ON
        rp.rid = ur.rid
      INNER JOIN
        open_journal_journal_people jp
      ON
        ur.uid = jp.uid
      WHERE
        rp.permission = 'informal approve journal' AND
        jp.jid = :jid AND ur.uid <> 1";
    */
  // New logic render user active list
  $sql =
    "SELECT
        ur.uid, jp.informal_approve_status
      FROM
        users_roles ur
      INNER JOIN
        role_permission rp
      ON
        rp.rid = ur.rid
      INNER JOIN
        open_journal_journal_people jp
      ON
        ur.uid = jp.uid
      WHERE
        rp.permission = 'informal approve journal' AND
        jp.jid = :jid AND ur.uid <> 1

        AND jp.created = (
          SELECT MAX(jp1.created)
          FROM {open_journal_journal_people} jp1
          WHERE jp1.uid = jp.uid AND jp1.jid = :jid
          GROUP BY jp1.uid)

        ";


  $informal_list = db_query($sql, array(':jid' => $journal->jid))->fetchAll();

  global $user;

  //$status_list = unserialize(OPEN_JOUNAL_INFORMAL_STATUS);
  $status_list = open_journal_get_status_list();
  foreach ($informal_list as &$informal) {

    $informal->user = user_load($informal->uid);
    $informal->user_info = open_journal_get_display_user_info($informal->user);


    if ($informal->uid == $user->uid) {
      $informal->add_class = ' informal-form';
      $informal->form = drupal_render(drupal_get_form('open_journal_informal_approve_sidebar_form', $journal, $informal));
    }
    else {
      $informal->add_class = '';
      $informal->form = $status_list[$informal->informal_approve_status];
    }

  }

  return $informal_list;

}

function open_journal_people_sort($people1, $people2) {
    if ($people1->created == $people2->created) {
        return 0;
    }
    if ($people1->created === 0) {
      $people1->created = 999999999999;
    }
    if ($people2->created === 0) {
      $people2->created = 999999999999;
    }
    return ($people1->created < $people2->created) ? -1 : 1;
}

function open_journal_people($journal) {
  $people_contributor_list = open_journal_people_contributor_list($journal);
  $people_active_list = open_journal_people_active_with_joined($journal->jid);


  $people_active_uid_key_list = array();
  foreach ($people_active_list as $i => $people) {
    if ($people->uid == 1) {
      unset($people_active_list[$i]);
    }
    else {
      $people_active_uid_key_list[$people->uid] = $people;
    }
  }

  $can_invite = user_access('invite people to journal');

  foreach ($people_contributor_list as $key => &$people) {

    if ($people->uid == 1) {
      unset($people_contributor_list[$key]);
      continue;
    }

    $people->active_in_journal = isset($people_active_uid_key_list[$people->uid])? TRUE: FALSE;


    if ($people->active_in_journal) {
      $people->add_class = ' active-people';
      $people->created = $people_active_uid_key_list[$people->uid]->created;
    }
    else {

      if (!$can_invite) {
        unset($people_contributor_list[$key]);
        continue;
      }

      $people->add_class = ' inactive-people';
      $people->created = 0;
    }

    $people->user_info = open_journal_get_display_user_info($people, array('image_style' => 'open_journal_avatar_large'));

    $people->form = '';
    if ($can_invite) {
      $people->form = drupal_render(drupal_get_form('open_journal_people_form', $journal->jid, $people->uid, $people->active_in_journal));
    }
  }

  $people_creator = user_load($journal->uid);
  $people_creator->user_info = open_journal_get_display_user_info($people_creator, array('image_style' => 'open_journal_avatar_large'));
  $people_creator->created = isset($people_active_uid_key_list[$journal->uid])? $people_active_uid_key_list[$journal->uid]->created: $journal->created;
  $people_creator->user_roles = isset($people_creator->uid)? open_journal_display_roles($people_creator->roles): array();
  usort($people_contributor_list, 'open_journal_people_sort');

  // Prepare user roles
  foreach ($people_contributor_list as &$contributor) {
    $contributor->user_roles = open_journal_display_roles($contributor->roles);
  }

  return theme('open_journal_detail', array(
    'jid' => $journal->jid,
    'journal' => $journal,
    'content' => theme('open_journal_people', array(
      'jid' => $journal->jid,
      'people_creator' => $people_creator,
      'people_contributor_list' => $people_contributor_list,
    )),
  ));
}


function open_journal_information($data=NULL) {
  return theme('open_journal_detail', array(
    'content' => drupal_render(drupal_get_form('open_journal_information_form',$data)),
    'sidebar' => '',
    'jid' => open_journal_get_field($data, 'jid'),
    'journal' => $data,
  ));
}

function open_journal_overview($journal) {
  // add dublincore meta data tag to html hearder
  $tags = array(
    'DC.Title' => array(
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'DC.Title',
        'content' => $journal->title,
      )
    ),
    'DC.Title.Alternative' => array(
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'DC.Title.Alternative',
        'content' => $journal->alt_title,
      )
    ),
    'DC.Creator' => array(
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'DC.Creator',
        'content' => $journal->dc_creator,
      )
    ),
    'DC.Subject' => array(
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'DC.Subject',
        'content' => $journal->dc_subject,
      )
    ),
    'DC.Publisher' => array(
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'DC.Publisher',
        'content' => $journal->dc_publisher,
      )
    ),
    'DC.Contributor' => array(
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'DC.Contributor',
        'content' => $journal->dc_contributor,
      )
    ),
    'DC.Date' => array(
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'DC.Date',
        'content' => $journal->dc_date,
      )
    ),
    'DC.type' => array(
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'DC.type',
        'content' => $journal->dc_type,
      )
    ),
    'DC.Format' => array(
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'DC.Format',
        'content' => $journal->dc_format,
      )
    ),
    'DC.Identifier' => array(
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'DC.Identifier',
        'content' => $journal->dc_identifier,
      )
    ),
    'DC.Language' => array(
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'DC.Language',
        'content' => $journal->dc_language,
      )
    ),
     'DC.Coverage' => array(
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'DC.Coverage',
        'content' => $journal->dc_coverage,
      )
    ),
    'DC.Right' => array(
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'DC.Right',
        'content' => $journal->dc_right,
      )
    ),
    'DC.Creator.CorporateName' => array(
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'DC.Creator.CorporateName',
        'content' => $journal->address,
      )
    )
  );



  foreach ($tags as $key => $val) {
    drupal_add_html_head($val, $key);
  }
  // get data from last discussion
  $file_last = open_journal_get_file_list($journal->jid, 1);
  // get data from discussion limit for display overview page
  $limit_overview_page = 3;
  $discussion = open_journal_discussion_list_limit($journal->jid, $limit_overview_page);

  // Prepare data send to theme
  $discussion_data = array();
  $i = 0;
  foreach($discussion as $row) {

    $discussion_data[$i]['did'] = $row->did;
    $discussion_data[$i]['uid'] = $row->uid;
    $discussion_data[$i]['user_info'] = $row->user;
    $discussion_data[$i]['auto'] = $row->auto;

    // System discussion
    if (!$row->auto) {
      $discussion_data[$i]['title'] = open_journal_trim($row->title, 50);
      $discussion_data[$i]['description'] = open_journal_trim($row->description, 100);
    }
    else {
      $discussion_data[$i]['title'] = $row->title;
      $discussion_data[$i]['description'] = $row->description;

    }

    $discussion_data[$i]['url'] = '';
    $discussion_data[$i]['jid'] = $journal->jid;
    $discussion_data[$i]['contributor_only'] = $row->contributor_only;

    // Reviewer can view lastest file only
    global $user;
    if($user->uid == 1 || !user_access('can not view authors data')  || $row->fid == $file_last[0]->fid) {
      $discussion_data[$i]['fid'] = $row->fid;
    }


    $i++;
  }
  // calculate total more link to discussion journal
  $more_discussion = count(open_journal_discussion_load_all($journal->jid))-$limit_overview_page;
  // get user and file data
  $user_info = $file_last[0]->user_info;
  $file = file_load($file_last[0]->fid);
  //$status_list = unserialize(OPEN_JOUNAL_STATUS);
  $status_list = open_journal_get_status_list();

  // Get status name and class
  $status_attributes = (object) open_journal_get_status_attributes($journal);
  $journal->status_class = $status_attributes->class;
  $journal->status_name  = $status_attributes->name;


  $status = array(
    'name'      => $status_attributes->name,
    'class'     => $status_attributes->class,
    'updated'   => date('d M Y', $journal->status_changed),
    'created'   => date('d M Y', $journal->created),
    'status_id' => $journal->sid,
  );
  // Prepare people list  send to theme
  $people = open_journal_people_active_list($journal->jid, NULL, $journal->uid, OPEN_JOURNAL_DISPLAY_IMAGE_USER_LIST_LIMIT);
  $people_list = array();
  $count_all_people = count(open_journal_people_active_list($journal->jid));

  $i = 0;
  $more_people = FALSE;
  foreach($people as $row) {

    $user_p = user_load($row->uid);
    $people_list[$i]['user_info'] = open_journal_get_display_user_info($user_p, array('owner_uid' => $journal->uid));
    $people_list[$i]['uid'] = $row->uid;

    $i++;
  }
  if($count_all_people > OPEN_JOURNAL_DISPLAY_IMAGE_USER_LIST_LIMIT) {
    $people_list['more_people']['user_info'] = open_journal_get_display_user_info_more();
    $more_people = TRUE;
  }
  if(OPEN_JOURNAL_SUB_LANG_ENABLE && $journal->dc_language != 'en') {
    $abstract = $journal->description_sub;
  }
  else {
    $abstract = $journal->description_en;
  }
  $abstract = check_markup($abstract, 'filtered_html');


  $abstract = check_markup($abstract, 'filtered_html');

  // Prepare information sidebar
  $information = (object) array();
  $information_field = open_journal_get_field_settings();


  if($information_field['dc_subject']) {
    $subject_label = 'Keywords';
    if(OPEN_JOURNAL_SUB_LANG_ENABLE) {
      $information->subject_sub['value'] = implode(", ", $journal->subject_sub);
      $information->subject_sub['label'] = OPEN_JOURNAL_SUB_LANG_KEYWORDS_LABEL;
      $subject_label .= ' ('.OPEN_JOURNAL_LANG_FULL_TEXT.')';
    }
    $information->subject_en['value'] = implode(", ", $journal->subject_en);
    $information->subject_en['label'] = $subject_label;
  }

  global $user;
  if(($information_field['creator_sub'] || $information_field['creator_en'] || $information_field['creator_email']) && ($user->uid == 1 || !user_access('can not view authors data'))) {

    $creator_label = 'Author';
    $co_author_label = 'Co-Authors';

    if(OPEN_JOURNAL_SUB_LANG_ENABLE) {
      $information->creator_sub['value'] = array_shift($journal->creator_sub);
      $information->creator_sub['label'] = OPEN_JOURNAL_SUB_LANG_AUTHOR_LABEL;

      $co_author_label .= ' ('.OPEN_JOURNAL_LANG_FULL_TEXT.')';
      $creator_label .= ' ('.OPEN_JOURNAL_LANG_FULL_TEXT.')';

      if (!empty($journal->creator_sub)) {
        $information->co_author_sub['value'] = implode(', ', $journal->creator_sub);
        $information->co_author_sub['label'] = 'Co-Authors ('.OPEN_JOURNAL_SUB_LANG_FULL_TEXT.')';
      }

    }
    $information->creator_en['value'] = array_shift($journal->creator_en);
    $information->creator_en['label'] = $creator_label;
    if (!empty($journal->creator_en)) {
      $information->co_author_en['value'] = implode(', ', $journal->creator_en);
      $information->co_author_en['label'] = $co_author_label;
    }
  }

  if($information_field['address']) {
    $information->dc_creator_address['value'] = $journal->address;
    $information->dc_creator_address['label'] = 'Offices';
  }



  if($information_field['dc_publisher']) {
    $information->dc_publisher['value'] = implode(", ", $journal->dc_publisher);
    $information->dc_publisher['label'] = 'Publisher';
  }
  if($information_field['dc_contributor']) {
    $information->dc_contributor['value'] = implode(", ", $journal->dc_contributor);
    $information->dc_contributor['label'] = 'Contributors';
  }
  if($information_field['dc_date']) {
    $information->dc_date['value'] = date('d M Y',$journal->dc_date);
    $information->dc_date['label'] = 'Date';
  }
  if($information_field['dc_language']) {
    $information->dc_language['value'] = $journal->dc_language;
    $information->dc_language['label'] = 'language';
  }
  if($information_field['dc_coverage']) {
    $information->dc_coverage['value'] = $journal->dc_coverage;
    $information->dc_coverage['label'] = 'Covreage';
  }
  if($information_field['dc_identifier']) {
    $information->dc_identifier['value'] = $journal->dc_identifier;
    $information->dc_identifier['label'] = 'Final URL';
  }
  if($information_field['dc_type']) {
    $information->dc_type['value'] = $journal->dc_type;
    $information->dc_type['label'] = 'Type';
  }
  if($information_field['dc_format']) {
    $information->dc_format['value'] = $journal->dc_format;
    $information->dc_format['label'] = 'Format';
  }

  if($information_field['dc_source']) {
    $information->dc_source['value'] = implode(", ", $journal->dc_source);
    $information->dc_source['label'] = 'Source';
  }

  if($information_field['dc_relation']) {
    $information->dc_relation = implode(", ", $journal->dc_relation);
    $information->dc_relation['label'] = 'Relation';
  }

  if($information_field['dc_right']) {
    $information->dc_right['value'] = $journal->dc_right;
    $information->dc_right['label'] = 'Right';
  }



  //  display language
  if($information->dc_language['value'] == OPEN_JOURNAL_SUB_LANG_CODE) {
    $information->dc_language['value'] = OPEN_JOURNAL_SUB_LANG_TEXT;
    $abstract_label = OPEN_JOURNAL_SUB_LANG_ABSTRACT_LABEL;
  }
  else {
    $information->dc_language['value'] = OPEN_JOURNAL_LANG_FULL_TEXT;
    $abstract_label = 'Abstract ('.OPEN_JOURNAL_LANG_FULL_TEXT.')';
  }

  $mpath = drupal_get_path('module', 'open_journal');
  $image_file = theme('image', array(
    'path' => $mpath.'/images/ic-has-file.png',
    'alt' => 'has file attach',
  ));
  return theme('open_journal_detail', array(
    'content' => theme('open_journal_overview_content', array(
      'jid' => $journal->jid,
      'abstract' => $abstract,
      'alt_title' => $journal->alt_title,
      'last_update' => date('d M Y', $file_last[0]->created),
      'update_by' => $user_info['display_name'],
      'latest_file' => file_create_url($file->uri),
      'discussion_data' => $discussion_data,
      'more_discussion' => $more_discussion,
      'abstract_label' => $abstract_label,
      'image_file' => $image_file,
      )
    ),
    'sidebar' => theme('open_journal_overview_sidebar', array(
      'jid' => $journal->jid,
      'status' => $status,
      'people_list' => $people_list,
      'information' => $information,
      'more_people' => $more_people,
      'uid' => $journal->uid,
      )
    ),
    'jid' => $journal->jid,
    'journal' => $journal,
  ));
}

function open_journal_discussion_list_limit($journal, $limit=0) {

  module_load_include('php', 'open_journal', 'includes/markdown');

  drupal_add_js(drupal_get_path('module', 'open_journal') . '/js/open_journal_status_sidebar.js');
  drupal_add_js(drupal_get_path('module', 'open_journal') . '/js/jquery.qtip.min.js');

  if (is_numeric($journal)) {
    $journal = (object) array('jid' => $journal);
  }
  // Query discussion list
  $sql = " SELECT
    max(d.did) as  did,
    max(c.cid) as cid,
    if(c.cid IS NOT NULL, c.uid, d.uid) as user,
    d.auto as auto

    FROM
      open_journal_discussion d
    LEFT JOIN
      open_journal_comment c
    ON
      d.did = c.did
    LEFT JOIN
      users u
    ON
      c.uid = u.uid OR
      d.uid = u.uid

    LEFT JOIN
      open_journal_discussion_role dr
    ON
      dr.did = d.did

    WHERE
      d.jid = :jid";

  global $user;
  $user_role_list = array();
  foreach ($user->roles as $key => $value) {
    $user_role_list[] = $key;
  }
  /*  New logic remove contributor only
  if (!user_access('access contributor process')) {
    $sql .= " AND d.contributor_only = 0";
  }
  */
  $sql .= " AND (dr.rid IS NULL OR dr.rid IN (:user_role_list))";
  $sql .= " GROUP BY d.did ORDER BY d.changed DESC";

  if ($limit) {
    $sql .= " LIMIT 0, ".$limit;
  }

  $discussion_list = db_query($sql, array(':jid' => $journal->jid, ':user_role_list' => $user_role_list))->fetchAll();

  foreach ($discussion_list as &$discussion_item) {

    $discussion = open_journal_discussion_load($discussion_item->did);

    if(isset($discussion_item->cid)) {
     $latest_comment = open_journal_comment_load($discussion_item->cid);
     $discussion->description = $latest_comment->message;
    }
    // System discussion
    if (!$discussion->auto) {
      $discussion->description = open_journal_trim(Markdown($discussion->description), 100);
      $discussion->title = open_journal_trim($discussion->title, 50);

    }
    else {
      $discussion->description = nl2br($discussion->description);
    }

    if(isset($discussion_item->user)) {
      $discussion->user = open_journal_get_display_user_info($discussion_item->user, array('auto' => $discussion_item->auto));
    }

    $discussion_item = $discussion;

  }
  return $discussion_list;
}

function open_journal_discussion_list($journal) {

  drupal_add_js(drupal_get_path('module', 'open_journal') . '/js/open_journal_status_sidebar.js');
  drupal_add_js(drupal_get_path('module', 'open_journal') . '/js/jquery.qtip.min.js');

  $discussion_list = open_journal_discussion_list_limit($journal);

  // Reviewer view lastest file only
  $file_last = open_journal_get_file_list($journal->jid, 1);
  foreach ($discussion_list as &$discussion) {
    global $user;
    if(!($user->uid == 1 || !user_access('can not view authors data')  || $discussion->fid == $file_last[0]->fid)) {
      $discussion->fid = 0;
    }

  }

  $mpath = drupal_get_path('module', 'open_journal');
  $image_file = theme('image', array(
    'path' => $mpath.'/images/ic-has-file.png',
    'alt' => 'has file attach',
  ));

  $sidebar = theme('open_journal_status_form', open_journal_get_status_form_variables($journal));

  if (user_access('access contributor process') || user_access('informal approve journal')) {
    $informal_list = open_journal_people_informal_approve_list($journal);
    $sidebar .= theme('open_journal_informal_approve_form', array('informal_list' => $informal_list));
  }

  // Addition file download sidebar
  $sidebar .= theme('open_journal_download_file_sidebar');
  $files = open_journal_get_file_list($journal->jid, 1);
  $file = $files[0];

  return theme('open_journal_detail', array(
    'content' => theme('open_journal_discussion_list', array(
      'menu_active_url' => OPEN_JOURNAL_PREFIX_PATH.'/'.$journal->jid.'/discussion',
      'discussion_list' => $discussion_list,
      'jid' => $journal->jid,
      'image_file' => $image_file,
      'file' => $file,
    )),
    'sidebar' => $sidebar,
    'jid' => $journal->jid,
    'journal' => $journal,
  ));


}
function open_journal_discussion_when_state_change($journal, $name='auto', $clean_timeout=True) {
  // Todo plug to state change function
  $next_status = $journal->sid;
  if (open_journal_get_last_state() == $journal->sid) {
    drupal_set_message(t('Congratulation this article is published.'));
  }
  $status_list = open_journal_get_status_list();
  $status_name = $status_list[$next_status];
  $sql = "SELECT * FROM {open_journal_template} WHERE sid = :sid AND name = :name";
  $result = db_query($sql, array(':sid' => $next_status, ':name' => $name));
  $template_list = $result->fetchAll();

  if (!empty($template_list)) {
    open_journal_replace_template_string($template_list, $journal);

    foreach ($template_list as $key => $value) {

      // Todo rit remove hardcode
      if ($journal->sid == 0) {
        $exclude_roles_me = FALSE;
      }
      else {
        $exclude_roles_me = TRUE;
      }

      $discussion = array(
        'jid' => $journal->jid,
        'title' => $value->template_title,
        'auto' => 1,
        'description' => $value->body,
      );
      if($journal->file) {
        $discussion['fid'] = $journal->file;
      }
      $discussion['roles'] = array();
      $role_list = open_journal_get_template_role_list($value->tpid);

      foreach ($role_list as $key2 => $value2) {
        $discussion['roles'][] = $value2->rid;
      }

      $discussion = (object) $discussion;
      open_journal_discussion_save($discussion, array('exclude_roles_me' => $exclude_roles_me));

    }
  }
  else {
    // Todo remove this because it move to template
    $discussion = array(
      'jid' => $jid,
      'title' => t('Congratulations! Status is now changed to '.ucwords($status_name) ),
      'description' => 'Your comments are now welcome in Discussions.',
      'roles' => array(),
    );
    $discussion = (object) $discussion;
    //open_journal_discussion_save($discussion);

  }

  if ($clean_timeout) {
    db_delete('open_journal_timeout')->condition('jid', $journal->jid)->execute();
  }

}

function open_journal_get_status_form_variables($journal) {

  // Prepare data to status side bar form
  //$status_list = unserialize(OPEN_JOUNAL_STATUS);
  $status_list = open_journal_get_status_list(TRUE, $journal);
  $vars = array();

  $vars['status_list'] = $status_list;
  $vars['journal'] = $journal;

  $vars['reject_form'] = '';
  $vars['withdraw_form'] = '';
  $vars['approve_form'] = '';

  $vars['next_status'] = open_journal_next_sid($journal->sid, TRUE);
  

  if (!$journal->reject && !$journal->withdraw && $vars['next_status']) {
    // Get withdraw template
    $template_list = open_journal_get_template_list($journal, 'withdraw');
    // Replace string
    open_journal_replace_template_string($template_list, $journal, TRUE);
    $vars['withdraw_form'] = drupal_render(drupal_get_form('open_journal_withdraw_sidebar_form', $journal, $template_list));
  }

  if ((user_access('approve with unanimity') || user_access('reject journal')) && !$journal->reject && !$journal->withdraw && $vars['next_status']) {
    if (user_access('reject journal')) {
      // Get reject template
      $template_list = open_journal_get_template_list($journal, 'reject');
      // Replace string
      open_journal_replace_template_string($template_list, $journal, TRUE);
      $vars['reject_form'] = drupal_render(drupal_get_form('open_journal_reject_sidebar_form', $journal, $template_list));
    }
    if (user_access('approve with unanimity')) {
      // Get approve template
      $template_list = open_journal_get_template_list($journal, 'approve');
      // Replace string
      open_journal_replace_template_string($template_list, $journal, TRUE);
      if (!empty($template_list)) {
        $vars['approve_template'] = TRUE;
      }
      $vars['template_list'] = $template_list;

      $vars['approve_form'] = drupal_render(drupal_get_form('open_journal_approve_sidebar_form', $journal, $vars['next_status'], $template_list));
    }
    $vars['status_add_class'] = ' can-approve';
  }
  else {
    $vars['status_add_class'] = ' no-approve';
  }
  return $vars;
}

function open_journal_next_sid($sid, $check_substate=FALSE) {
    $result = db_query("SELECT next_sid, is_substate, parent_sid from {open_journal_state} WHERE sid = :sid", array(":sid" => $sid));
    $result = $result->fetchAll();
    $state = $result[0];

    if($state->next_sid == NULL) {
      return FALSE;
    }


    $result_next = db_query("SELECT next_sid, parent_sid, is_root, sid, is_substate from {open_journal_state} WHERE sid = :sid", array(":sid" => $state->next_sid));
    $result_next = $result_next->fetchAll();
    $state_next  = $result_next[0];

    if (!$state_next->parent_sid && !$state_next->is_root) {
      $next_sid = open_journal_next_sid($state->next_sid);
    }
    else {
      if ($check_substate && $state->is_substate) {
        $next_sid = open_journal_next_sid($state->parent_sid);
      }
      else {
        $next_sid = $state->next_sid;
      }
    }

    return $next_sid;
}

function open_journal_before_sid($sid) {
    $result = db_query("SELECT sid from {open_journal_state} WHERE next_sid = :sid", array(":sid" => $sid));
    $result = $result->fetchAll();
    $state = $result[0];
    if($state->sid == NULL) {
      return FALSE;
    }

    $result_before = db_query("SELECT next_sid, parent_sid, is_root, sid from {open_journal_state} WHERE sid = :sid", array(":sid" => $state->sid));
    $result_before = $result_before->fetchAll();
    $state_before  = $result_before[0];

    if (is_null($state_before->parent_sid) && is_null($state_before->is_root)) {

      $before_sid = open_journal_before_sid($state_before->sid);
    }
    else {
      $before_sid = $state_before->sid;
    }
    return $before_sid;
}

function open_journal_parent_sid($sid) {
    $result = db_query("SELECT parent_sid from {open_journal_state} WHERE sid = :sid", array(":sid" => $sid));
    $result = $result->fetchAll();
    return $result[0]->parent_sid;
}

function open_journal_get_comment_field($cid, $field) {
  $sql = " SELECT ".$field."  FROM open_journal_comment WHERE  cid=".$cid."  ";
  $result = db_query($sql)->fetchAll();
  return $result[0]->$field;
}

function open_journal_get_discussion_field($did, $field) {
  $sql = " SELECT ".$field."  FROM open_journal_discussion WHERE  did=".$did."  ";
  $result = db_query($sql)->fetchAll();
  return $result[0]->$field;
}

function open_journal_get_template_list($journal, $name='template') {
  $parent_sid = open_journal_parent_sid($journal->sid);
  $sql = "SELECT * FROM {open_journal_template} WHERE (sid = :sid OR sid = :parent_sid) AND name = :name";
  $result = db_query($sql, array(':sid' => $journal->sid, ':name' => $name, ':parent_sid' => $parent_sid));
  return $result->fetchAll();
}

function open_journal_get_template_role_list($tpid) {
  $sql = "SELECT r.name, r.rid FROM {open_journal_template_role} t LEFT JOIN {role} r ON r.rid = t.rid WHERE t.tpid = :tpid";
  $result = db_query($sql, array(':tpid' => $tpid));
  return $result->fetchAll();
}

function open_journal_discussion_add($journal) {

  $user_role_list = user_roles(FALSE, 'send email template');
  // Pass template to discussion form
  $template_list = open_journal_get_template_list($journal);

  // Replace special string from body template
  open_journal_replace_template_string($template_list, $journal, TRUE);

  module_load_include('inc', 'open_journal', 'includes/open_journal_status_form');

  $sidebar = theme('open_journal_status_form', open_journal_get_status_form_variables($journal));
  if (user_access('access contributor process') || user_access('informal approve journal')) {
    $informal_list = open_journal_people_informal_approve_list($journal);
    $sidebar .= theme('open_journal_informal_approve_form', array('informal_list' => $informal_list));
  }

  return theme('open_journal_detail', array(
    'menu_active_url' => OPEN_JOURNAL_PREFIX_PATH.'/'.$journal->jid.'/discussion',
    'content' => drupal_render(drupal_get_form('open_journal_discussion_form', $journal, NULL, $template_list, $user_role_list)),
    'sidebar' => $sidebar,
    'jid' => $journal->jid,
    'journal' => $journal,

  ));
}
function open_journal_replace_template_string($template_list, $journal, $add_role=FALSE) {

  $user_journal = user_load($journal->uid);
  $replace_code_list = array('@author', '@journal_id', '@journal_title', '@discussion_add_link', '@information_link', '@reciever_roles', '@approve_by_timer_link');

  foreach ($template_list as $key => $value) {
    $role_list = open_journal_get_template_role_list($value->tpid);
    $reciever_roles = '';
    $i = 1;
    foreach ($role_list as $role_key => $role_value) {
      $reciever_roles .= ucfirst($role_value->name);
      if (count($role_list) != $i) {
        $reciever_roles .= ', ';
      }
      $i++;

    }

    //$author_replace = $user_journal->data['firstname']." ".$user_journal->data['lastname'];
    $author_replace = "ผู้เขียน";
    $replace_code_to = array(
      $author_replace,
      $journal->code,
      $journal->title,
      l('กดที่ลิงก์นี้ เมื่อท่านเห็นชอบกับไฟล์ Artwork', 'journal/'.$journal->jid.'/discussion/add', array('absolute' => TRUE)),
      l('Information', 'journal/'.$journal->jid.'/information', array('absolute' => TRUE)),
      $reciever_roles,
      url('journal/'.$journal->jid.'/approve-by-timer', array('absolute' => TRUE)),

    );

    $template_list[$key]->body = str_replace($replace_code_list, $replace_code_to, $value->body);

    if ($add_role) {
      $template_list[$key]->role = $role_list;

    }
  }

}

function open_journal_replace_template_reciever_string($template_string, $roles) {


}

function open_journal_discussion_edit($journal, $discussion) {
  module_load_include('inc', 'open_journal', 'includes/open_journal_status_form');

  global $user;
  if(!($user->uid == $discussion->uid)) {
    drupal_goto('a random page');
  }

  $sidebar = theme('open_journal_status_form', open_journal_get_status_form_variables($journal));
  if (user_access('access contributor process') || user_access('informal approve journal')) {
    $informal_list = open_journal_people_informal_approve_list($journal);
    $sidebar .= theme('open_journal_informal_approve_form', array('informal_list' => $informal_list));
  }

  $user_role_list = user_roles(FALSE, 'send email template');
  // Pass template to discussion form
  $template_list = open_journal_get_template_list($journal);
  $discussion->roles = open_journal_get_discussion_role($discussion->did);
  return theme('open_journal_detail', array(
    'menu_active_url' => OPEN_JOURNAL_PREFIX_PATH.'/'.$journal->jid.'/discussion',
    'content' => drupal_render(drupal_get_form('open_journal_discussion_form', $journal, $discussion, $template_list, $user_role_list)),
    'sidebar' => $sidebar,
    'jid' => $journal->jid,
    'journal' => $journal,

  ));
}

function open_journal_discussion_delete($journal, $discussion) {

  global $user;
  if(!($user->uid == $discussion->uid)) {
    drupal_goto('a random page');
  }


  module_load_include('inc', 'open_journal', 'includes/open_journal_status_form');

  $sidebar = theme('open_journal_status_form', open_journal_get_status_form_variables($journal));
  if (user_access('access contributor process') || user_access('informal approve journal')) {
    $informal_list = open_journal_people_informal_approve_list($journal);
    $sidebar .= theme('open_journal_informal_approve_form', array('informal_list' => $informal_list));
  }

  return theme('open_journal_detail', array(
    'menu_active_url' => OPEN_JOURNAL_PREFIX_PATH.'/'.$journal->jid.'/discussion',
    'content' => drupal_render(drupal_get_form('open_journal_discussion_delete_form', $journal, $discussion)),
    'sidebar' => $sidebar,
    'jid' => $journal->jid,
    'journal' => $journal,

  ));
}

function open_journal_comment_edit($journal, $discussion, $comment) {

  module_load_include('inc', 'open_journal', 'includes/open_journal_status_form');

  global $user;
  if(!($user->uid == $comment->uid)) {
    drupal_goto('a random page');
  }

  $sidebar = theme('open_journal_status_form', open_journal_get_status_form_variables($journal));
  if (user_access('access contributor process') || user_access('informal approve journal')) {
    $informal_list = open_journal_people_informal_approve_list($journal);
    $sidebar .= theme('open_journal_informal_approve_form', array('informal_list' => $informal_list));
  }

  return theme('open_journal_detail', array(
    'menu_active_url' => OPEN_JOURNAL_PREFIX_PATH.'/'.$journal->jid.'/discussion',
    'content' => drupal_render(drupal_get_form('open_journal_comment_form', $journal, $discussion, $comment)),
    'sidebar' => $sidebar,
    'jid' => $journal->jid,
    'journal' => $journal,

  ));
}

function open_journal_comment_delete($journal, $discussion, $comment) {

  global $user;
  if(!($user->uid == $comment->uid)) {
    drupal_goto('a random page');
  }

  module_load_include('inc', 'open_journal', 'includes/open_journal_status_form');
  $sidebar = theme('open_journal_status_form', open_journal_get_status_form_variables($journal));
  if (user_access('access contributor process') || user_access('informal approve journal')) {
    $informal_list = open_journal_people_informal_approve_list($journal);
    $sidebar .= theme('open_journal_informal_approve_form', array('informal_list' => $informal_list));
  }

  return theme('open_journal_detail', array(
    'menu_active_url' => OPEN_JOURNAL_PREFIX_PATH.'/'.$journal->jid.'/discussion',
    'content' => drupal_render(drupal_get_form('open_journal_comment_delete_form', $journal, $discussion, $comment)),
    'sidebar' => $sidebar,
    'jid' => $journal->jid,
    'journal' => $journal,

  ));
}

function open_journal_discussion_remove($did) {
  db_delete('open_journal_discussion')
    ->condition('did', $did)
    ->execute();
}

function open_journal_discussion_detail($journal, $discussion) {

  module_load_include('php', 'open_journal', 'includes/markdown');

  global $user;
  module_load_include('inc', 'open_journal', 'includes/open_journal_status_form');
  
  drupal_add_js(drupal_get_path('module', 'open_journal') . '/js/open_journal_status_sidebar.js');
  drupal_add_js(drupal_get_path('module', 'open_journal') . '/js/jquery.qtip.min.js');

  $discussion->user_info = open_journal_get_display_user_info($discussion->uid);
  $discussion->description = check_markup(Markdown($discussion->description), 'filtered_html');
  $discussion->file = $discussion->fid? file_load($discussion->fid): NULL;
  $discussion->can_edit = $user->uid == $discussion->uid;
  // Revewer can view lastest file only
  $file_last = open_journal_get_file_list($journal->jid, 1);
  if(!($user->uid == 1 || !user_access('can not view authors data')  || $discussion->fid == $file_last[0]->fid)) {
    $discussion->file = NULL;
  }

  $comment_list = open_journal_comment_load_all($discussion->did);
  foreach ($comment_list as &$comment) {
    $comment->user_info = open_journal_get_display_user_info($comment->uid);
    $comment->message = check_markup(Markdown($comment->message), 'filtered_html');
    $comment->file = $comment->fid? file_load($comment->fid): NULL;
    $comment->can_edit = $user->uid == $comment->uid;
    // Revewer can view lastest file only
    if(!($user->uid == 1 || !user_access('can not view authors data')  || $comment->fid == $file_last[0]->fid)) {
      $comment->file = NULL;
    }
  }


  $sidebar = theme('open_journal_status_form', open_journal_get_status_form_variables($journal));
  if (user_access('access contributor process') || user_access('informal approve journal')) {
    $informal_list = open_journal_people_informal_approve_list($journal);
    $sidebar .= theme('open_journal_informal_approve_form', array('informal_list' => $informal_list));
  }
  return theme('open_journal_detail', array(
    'menu_active_url' => OPEN_JOURNAL_PREFIX_PATH.'/'.$journal->jid.'/discussion',
    'content' => theme('open_journal_discussion_detail', array(
      'journal' => $journal,
      'discussion' => $discussion,
      'current_user_info' => open_journal_get_display_user_info($user),
      'comment_form' => drupal_render(drupal_get_form('open_journal_comment_form', $journal, $discussion)),
      'comment_list' => $comment_list,
    )),
    'sidebar' => $sidebar,
    'jid' => $journal->jid,
    'journal' => $journal,
  ));
}

function open_journal_get_active_menu_attributes($menu_active_url) {
  if (strpos($_GET['q'], $menu_active_url) === 0) {
    return array('attributes' => array('class' => array('active')));
  }
  return array();
}

function open_journal_get_file_list($jid, $limit=NULL) {

  /*$sql = "SELECT
      DISTINCT f.uid, IF((d.fid IS NOT NULL AND d.fid <> 0), d.fid, c.fid) AS fid, f.filename, f.filesize, f.uri, f.timestamp, f.timestamp AS created
    FROM
      open_journal_discussion d
    LEFT JOIN
      open_journal_comment c
    ON
      d.did = c.did
    INNER JOIN
      file_managed f
    ON
      c.fid = f.fid OR
      d.fid = f.fid
    WHERE
      d.jid = :jid AND
      ((c.fid IS NOT NULL AND c.fid <> 0) OR (d.fid IS NOT NULL AND d.fid <> 0))";


  if (!user_access('access contributor process')) {
    $sql .= " AND d.contributor_only = 0";
  }

  $sql .= " ORDER BY c.created DESC, d.created DESC".($limit? (' LIMIT 0, '.$limit): '');
  */

  // New sql

  $sql_1 = "SELECT d.uid, d.fid,f.filename, f.filesize, f.uri, f.timestamp, d.created AS created
  FROM open_journal_discussion d
  LEFT JOIN file_managed f
  ON d.fid = f.fid
  WHERE d.jid = :jid AND d.fid IS NOT NULL AND d.fid <> 0";
  if (!user_access('access contributor process')) {
    $sql_1 .= " AND d.contributor_only = 0";
  }

  $sql_2 = "SELECT c.uid, c.fid,f.filename, f.filesize, f.uri, f.timestamp, c.created AS created
  FROM open_journal_discussion d
  LEFT JOIN open_journal_comment c
  ON d.did = c.did
  LEFT JOIN file_managed f
  ON c.fid = f.fid
  WHERE d.jid = :jid AND c.fid IS NOT NULL AND c.fid <> 0";
  if (!user_access('access contributor process')) {
    $sql_2 .= " AND d.contributor_only = 0";
  }

  $sql = "SELECT * FROM ( ".$sql_1." UNION ".$sql_2.") AS tb
  ORDER BY tb.created DESC".($limit? (' LIMIT 0, '.$limit): '');




  //$sql .= " ORDER BY tb.created DESC".($limit? (' LIMIT 0, '.$limit): '');

  $file_list = db_query($sql, array(':jid' => $jid))->fetchAll();

  foreach ($file_list as &$file) {
    $account = user_load($file->uid);
    $file->user = $account;
    $file->user_info = open_journal_get_display_user_info($account);
  }





  return $file_list;
}

function open_journal_file($journal) {

  // Revewer can view lastest file only
  global $user;
  if($user->uid == 1 || !user_access('can not view authors data')) {
    $file_list = open_journal_get_file_list($journal->jid);
  }
  else {
    $file_list = open_journal_get_file_list($journal->jid, 1);
  }



  return theme('open_journal_detail', array(
    'content' => theme('open_journal_file', array(
      'file_list' => $file_list,
      'journal' => $journal,
      'file_icon' => theme('image', array(
        'path' => drupal_get_path('module', 'open_journal').'/images/ic-has-file.png',
        'alt' => 'has file attach',
      )),
    )),
    'jid' => $journal->jid,
    'journal' => $journal,
  ));
}

function open_journal_load_section($section_id) {

  $query_var = array(':sid' => $section_id);
  $sql =
   "SELECT j.*
    FROM
      {open_journal_issue_journal} ij
    LEFT JOIN
      {open_journal_journal} j
    ON
      ij.jid = j.jid
    WHERE
      ij.sid = :sid";

  $result = db_query($sql, $query_var)->fetchAll();


  $query_var = array(':sid' => $section_id);
  $sql =
   "SELECT s.*
    FROM
      {open_journal_issue_section} s
    WHERE
      s.sid = :sid";

  $section = db_query($sql, $query_var)->fetchObject();
  $section->abbrev = '';
  $section->articles = $result;

  /*
  $section = new stdClass();
  $section->title = 'MOCK_TITLE'.rand();
  $section->abbrev = 'MOCK_ABBREV'.rand();
  $section->articles = $result;
  */


  return $section;
}

function open_journal_load_issue($issue_id) {
  # TODO: Query list section in issue
  $query_var = array(':iid' => $issue_id);
  $sql =
   "SELECT s.sid
    FROM
      {open_journal_issue_section} s
    WHERE
      s.iid = :iid
    ORDER BY weight";
  $result = db_query($sql, $query_var)->fetchAllKeyed(0, 0);

  /*
  $result1 = new stdClass();
  $result1->sid = '1';
  $result2 = new stdClass();
  $result2->sid = '2';
  $result3 = new stdClass();
  $result3->sid = '3';
  $result = array();
  $result[] = $result1;
  $result[] = $result2;
  $result[] = $result3;
  */

  $query_var = array(':iid' => $issue_id);
  $sql =
   "SELECT i.*
    FROM
      {open_journal_issue} i
    WHERE
      i.iid = :iid";
  $issue = db_query($sql, $query_var)->fetchObject();

  $issue->id = $issue->iid;
  $issue->description = '';
  $issue->volumn = $issue->volume;
  $issue->date_published = $issue->publish_date;
  $issue->sections = array_values($result);

  /*
  $issue = new stdClass();
  $issue->id = rand();
  $issue->title = 'MOCK_TITLE'.rand();
  $issue->description = 'MOCK_description';
  $issue->volumn = 'MOCK_volumn';
  $issue->number = 'MOCK_number';
  $issue->year = 'MOCK_year';
  $issue->date_published = '2013-03-09';
  $issue->access_date = '2013-03-09';
  $issue->sections = $result;
  */

  return $issue;
}

function open_journal_load_all_issue() {
  # TODO: Query list issue
  $query_var = array();
  $sql =
   "SELECT i.iid FROM {open_journal_issue} i";
  $result = db_query($sql, $query_var)->fetchAllKeyed(0, 0);;

  /*
  $result1 = new stdClass();
  $result1->iid = '1';
  $result2 = new stdClass();
  $result2->iid = '2';
  $result3 = new stdClass();
  $result3->iid = '3';
  $result = array();
  $result[] = $result1;
  $result[] = $result2;
  $result[] = $result3;
  */

  $issue_list->issues = array_values($result);

  return $issue_list;
}

function open_journal_load_multiple($user=NULL, $after_jid=NULL, $limit=NULL, $status='all') {
   // Query data from database for edit journal when have journal ID

  $query_var = array();
  $sql =
   "SELECT DISTINCT j.*
    FROM
      {open_journal_journal_people} jp
    LEFT JOIN
      {open_journal_journal} j
    ON
      jp.jid = j.jid
    LEFT JOIN
      {open_journal_state} s1
    ON
      j.sid = s1.sid
    LEFT JOIN
      {open_journal_state} s2
    ON
      s1.parent_sid = s2.sid
    LEFT JOIN
      {open_journal_state} s3
    ON
      s2.parent_sid = s3.sid
    WHERE
      1 = 1";

  if($user !== NULL) {
    $sql .= " AND jp.uid = :uid";
    $query_var[':uid'] = $user->uid;
  }
  if($status != 'all') {
    $sql .= " AND (s1.sid = :sid OR s2.sid = :sid OR s3.sid = :sid)";
    $query_var[':sid'] = $status;
  }

  if($after_jid !== NULL) {
    $sql .= " AND j.jid < :jid ";
    $query_var[':jid'] = $after_jid;
  }
  if(isset($user->data['not_show_reject']) && $user->data['not_show_reject']) {
    $sql .= ' AND j.reject = 0 ';
  }
  if(isset($user->data['not_show_withdraw']) && $user->data['not_show_withdraw']) {
    $sql .= ' AND j.withdraw = 0 ';
  }
  $sql .= " ORDER BY j.jid DESC";

  if($limit) {
    $sql .= " LIMIT 0, ".$limit;
  }

  $result = db_query($sql, $query_var)->fetchAll();


  return $result;
}

function open_journal_get_status_attributes($journal) {

  //$status_list = unserialize(OPEN_JOUNAL_STATUS);
  $status_list = open_journal_get_status_list();
  if($journal->reject) {
    $class = 'reject';
    $name = 'Reject';
  }
  elseif($journal->withdraw) {
    $class = 'withdraw';
    $name = 'Withdraw';
  }
  else {
    $class = $journal->sid;
    $name = $status_list[$journal->sid];
  }
  return array('class' => $class, 'name' => $name);
}
// Todo rit change wording status to state
function open_journal_get_status_list($full=FALSE, $journal=NULL) {

  // Todo return full only
  if ($full) {
    $sql = "SELECT * FROM {open_journal_state}";
  }
  else {
    $sql = "SELECT name, sid FROM {open_journal_state}";
  }
  $result = db_query($sql);
  $data = $result->fetchAll();
  $state_map = array();
  $data_list = array();

  if ($full) {

    // Build state map
    foreach ($data as $state) {
      $state_map[$state->sid] = $state;
    }

    // Find root state
    $children_state_map = array();
    foreach ($data as $sid => $state) {
      if ($state->next_sid != NULL) {
        $children_state_map[$state->next_sid] = $state;
      }
      if ($state->next_ssid != NULL) {
        $children_state_map[$state->next_ssid] = $state;
      }
    }
    $root_sid_list = array_diff(array_keys($state_map), array_keys($children_state_map));
    $root_sid = current($root_sid_list);

    // Build list
    $stamp_sid_list = array();
    $stamp_ssid_list = array();
    $state = $state_map[$root_sid];
    while ($state) {
      if (!in_array($state->sid, $stamp_sid_list)) {
        $data_list[$state->sid] = (array) $state_map[$state->sid];
        $stamp_sid_list[] = $state->sid;
      }

      $next_sid = $state->next_sid;
      if ($state->next_ssid && !in_array($state->next_ssid, $stamp_ssid_list)) {
        $next_sid = $state->next_ssid;
        $stamp_ssid_list[] = $state->next_ssid;
      }
      $state = $state_map[$next_sid];
    }

    if ($journal) {
      $active = TRUE;
      foreach ($data_list as &$value) {

        // Active current substate and parent state
        if ($value['next_ssid'] != NULL) {
          $substate = $state_map[$value['next_ssid']];
          while ($substate->is_substate) {
            if ($substate->sid == $journal->sid) {
              $value['current'] = TRUE;
              break;
            }
            $substate = $state_map[$substate->next_sid];
          }
        }

        // case normal active and current
        if ($value['sid'] == $journal->sid) {
          $value['current'] = TRUE;
          $active = FALSE;
        }

        $value['active'] = $active;
      }
    }

  }
  else {
    foreach ($data as $row) {
      $data_list[$row->sid] = ($row->name);
    }

  }
  return $data_list;
}

function open_journal_list($status=NULL, $after_jid=NULL, $limit=OPEN_JOURNAL_LIST_IPP) {
  open_journal_get_status_list();
  drupal_set_title('');
  global $user;

  if ($status !== NULL) {
    $account = user_load($user->uid);
    user_save($account, array('data' => array('journal_filter_status' => $status)));
  }
  elseif ($user->data['journal_filter_status'] !== NULL) {
    $status = $user->data['journal_filter_status'];
    drupal_goto(OPEN_JOURNAL_PREFIX_PATH.'/list/'.$status);
  }
  else {
    $status = 'all';
  }

  $mpath = drupal_get_path('module', 'open_journal');
  drupal_add_js($mpath.'/js/open_journal_list_load_more.js');

  module_load_include('inc', 'open_journal', 'includes/open_journal_status_form');
  // Get checkbox not reject form
  $not_reject_form = drupal_render(drupal_get_form('open_journal_not_reject_form'));
  // Get checkbox not withdraw form
  $not_withdraw_form = drupal_render(drupal_get_form('open_journal_not_withdraw_form'));

  // TODO: Refactor to use COUNT function in SQL
  $list = open_journal_load_multiple($user);
  $count_journal = count($list);
  //$status_list = unserialize(OPEN_JOUNAL_STATUS);
  $status_list = open_journal_get_status_list(TRUE);
  $current_status_name = isset($status_list[$status]['name']) ? $status_list[$status]['name']: 'All articles';


  $user_info = open_journal_get_display_user_info($user , array('image_style' => 'open_journal_avatar_large'));

  $journal_list = open_journal_load_multiple($user, $after_jid, $limit, $status);

  foreach ($journal_list as &$journal) {

    if (OPEN_JOURNAL_SUB_LANG_ENABLE && $journal->dc_language != 'en') {
      $journal->title = $journal->title_sub? $journal->title_sub: $journal->title_en;
    }
    else {
      $journal->title = $journal->title_en? $journal->title_en: $journal->title_sub;
    }

    // Get status name and class
    // Todo Chane method to get state data
    $status_attributes = (object) open_journal_get_status_attributes($journal);
    $journal->status_class = $status_attributes->class;
    $journal->status_name  = $status_attributes->name;

    $journal->people_list = open_journal_people_active_list($journal->jid, NULL, $journal->uid, OPEN_JOURNAL_DISPLAY_IMAGE_USER_LIST_LIMIT+1);
    foreach ($journal->people_list as &$people) {
      $people->display_info = open_journal_get_display_user_info($people, array('owner_uid' => $journal->uid));
    }

    if (count($journal->people_list) > OPEN_JOURNAL_DISPLAY_IMAGE_USER_LIST_LIMIT) {
      array_pop($journal->people_list);
      $journal->people_list['more']->display_info = open_journal_get_display_user_info_more();
    }
    $count_all_people = count(open_journal_people_active_list($journal->jid));

    // Calculate different date
    $last_update = open_journal_get_last_update($journal->jid);
    $start = new DateTime(date('Y-m-d', $last_update));
    $end = new DateTime();
    $days = round(($end->format('U') - $start->format('U')) / (60*60*24));
    $journal->lastupdate_ago = $days;
  }

  // Check rander load more
  // TODO: has_more_page checker better performance
  $has_more_page = $count_journal && open_journal_load_multiple($user, $journal->jid, $limit, $status);
  $update_load_more_url = FALSE;

  if ($has_more_page) {
    $update_load_more_url = url(OPEN_JOURNAL_PREFIX_PATH.'/list/'.$status.'/'.$journal->jid.'/'.$limit);
  }


  // render json respone for load mor ajax
  if (isset($_GET['ajax']) && $_GET['ajax']) {

    foreach ($journal_list as &$journal) {
      $journal = theme('open_journal_list_item', array('journal' => $journal));
    }

    $response = array(
      'item_list' => $journal_list,
      'update_load_more_url' => $update_load_more_url
    );

    drupal_json_output($response);
    exit();
  }
  $user_roles = open_journal_display_roles($user->roles);

  // TODO: Edit hook theme with default value foward
  return theme('open_journal_list', array(
    'journal_list' => $journal_list,
    'user_info' => $user_info,
    'count_journal' => $count_journal,
    'limit' => OPEN_JOURNAL_LIST_IPP,
    'update_load_more_url' => $update_load_more_url,
    'status_list' => $status_list,
    'current_status_name' => $current_status_name,
    'status' => $status,
    'not_reject_form' => $not_reject_form,
    'not_withdraw_form' => $not_withdraw_form,
    'user_roles' => $user_roles,

  ));

}

function open_journal_display_roles($user_roles) {
  foreach ($user_roles as &$role) {
    if($role == 'authenticated user') {
      $role = 'researcher';
    }
  }

  // Case editor reviewer librarian not display researcher role
  if (count($user_roles) > 1) {
    array_shift($user_roles);
  }
  $user_roles = implode(', ', $user_roles);


  return $user_roles;
}

function open_journal_get_field_settings() {
  // DC field settings
  global $user;
  if($user->uid == 1 || !user_access('can not view authors data')) {
    $access_author = 1;
  }
  else {
    $access_author = 0;
  }
  return array(
    'dc_title'       => 1,
    'dc_creator'     => $access_author,
    'dc_subject'     => 1,
    'dc_description' => 1,
    'dc_publisher'   => 1,
    'dc_contributor' => 1,
    'dc_date'        => 1,
    'dc_type'        => 1,
    'dc_format'      => 1,
    'dc_identifier'  => 1,
    'dc_source'      => 0,
    'dc_language'    => 1,
    'dc_relation'    => 0,
    'dc_coverage'    => 1,
    'dc_right'      => 1,
    'creator_sub'   => $access_author,
    'creator_en'   => $access_author,
    'creator_email'   => $access_author,
    'address' => 1,
    'title_sub' => 1,
    'title_en' => 1,
  );
}

function open_journal_image_default_styles() {
  $styles = array();

  $styles['open_journal_logo'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => FALSE,
          'height' => 42,
          'upscale' => FALSE
        ),
        'weight' => 0,
      ),
    ),
  );

  $styles['open_journal_avatar_small'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 32,
          'height' => 32,
        ),
        'weight' => 0,
      ),
    ),
  );
  $styles['open_journal_avatar_medium'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 40,
          'height' => 40,
        ),
        'weight' => 0,
      ),
    ),
  );
  $styles['open_journal_avatar_large'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 73,
          'height' => 73,
        ),
        'weight' => 0,

      ),
    ),
  );
  return $styles;
}

function open_journal_get_real_name($account) {
  $real_name = '';

  if (!is_array($account->data)) {
    $account->data = unserialize($account->data);
  }
  if (isset($account->data['firstname']) && $account->data['firstname']) {
    $real_name .= $account->data['firstname'];
  }

  if (isset($account->data['lastname']) && $account->data['lastname'] && $real_name) {
    $real_name .= ' '.truncate_utf8($account->data['lastname'], 1).'.';
  }
  elseif (isset($account->data['lastname']) && $account->data['lastname'] && !$real_name) {
    $real_name .= $account->data['lastname'];
  }
  else {
    $real_name .= $account->name;
  }

  return $real_name;
}

/**
 * $account require uid, name, (obj|str) data, (obj|int) picture
 */
function open_journal_get_display_user_info($account, $variables=array()) {

  $account = is_numeric($account)? user_load($account): $account;
  $mpath = drupal_get_path('module', 'open_journal');

  $default_variables = array(
    'image_style' => 'open_journal_avatar_medium',
    'user' => NULL,
    'picture_class' => array(),
    'name_class' => array(),
    'name_class' => array(),
    'owner_uid' => NULL
  );

  $variables = array_merge($default_variables, $variables);
  $image_style = image_style_load($variables['image_style']);
  $size = array();
  if ($width = $image_style['effects'][0]['data']['width']) {
    $size[] = $width;
  }
  if ($height = $image_style['effects'][0]['data']['height']) {
    $size[] = $height;
  }
  $size = min($size);

  if (!$account) {
    $deleted_name_text = 'Deleted U.';
    $deleted_name = '<span class="user-name-wrapper">'.$deleted_name_text.'</span>';
    $deleted_picture = '<div class="user-picture-wrapper">'.theme('image', array(
      //'path' => 'open_journal/avatar/010110101000100100101010001/'.$size.'.png',
      'path' => $mpath.'/images/user.png',
      'width' => $size,
      'height' => $size,
      'alt' => $deleted_name_text,
      'title' => $deleted_name_text,
    )).'</div>';

    $info_deleted = array(
      'display_picture' => $deleted_picture,
      'display_name' => $deleted_name,
      'display_name_text' =>  $deleted_name_text,
      'access account profile' => FALSE,
    );

    return $info_deleted;
  }


  // Prepare name and picture to display
  $real_name = open_journal_get_real_name($account);

  $first_role = end($account->roles);
  $role_name = $account->data['current_role']? $account->roles[$account->data['current_role']]: $first_role;
  $role_name = ucfirst($role_name);

  //$dummy_name = $account->name;
  $dummy_name = $role_name;
  $dummy_name_text = $dummy_name;
  
  $dummy_picture = theme('image', array(
    //'path' => 'open_journal/avatar/'.md5(strtolower(trim($account->name))).'/'.$size.'.png',
    'path' => $mpath.'/images/user.png',

    'width' => $size,
    'height' => $size,
    'alt' => $dummy_name,
    'title' => $dummy_name,
  ));


  if (!$account->picture) {
    $real_picture = theme('image', array(
      //'path' => 'open_journal/avatar/'.md5(strtolower(trim($account->name))).'/'.$size.'.png',
      'path' => $mpath.'/images/user.png',
      'width' => $size,
      'height' => $size,
      'alt' => $real_name,
      'title' => $real_name,
    ));
  }
  else {

    $picture = file_load(is_numeric($account->picture)? $account->picture: $account->picture->fid);

    $real_picture = theme('image_style', array(
      'style_name' => $image_style['name'],
      //'path' => $picture->uri,
      'path' => $mpath.'/images/user.png',
      'width' => $size,
      'height' => $size,
      'alt' => $real_name,
      'title' => $real_name,
    ));
  }

  $account->data = !is_array($account->data)? unserialize($account->data): $account->data;



  if ($variables['owner_uid'] == $account->uid) {
    $real_picture .= '<span class="owner-label">Owner</span>';
    $dummy_picture = '<span class="user-picture-wrapper">'.$dummy_picture.'<span class="owner-label">Owner</span></span>';
  }
  else {
    $dummy_picture = '<span class="user-picture-wrapper">'.$dummy_picture.'</span>';

  }

  $variables['picture_class'][] = 'user-picture-wrapper';
  $variables['name_class'][] = 'user-name-wrapper';

  $user_profile_url = drupal_get_destination();
  $user_profile_url = $user_profile_url['destination'];
  $user_profile_url = OPEN_JOURNAL_PREFIX_PATH.'/account/'.$account->uid;

  $real_picture = l($real_picture, $user_profile_url, array(
    'html' => TRUE,
    'attributes' => array('class' => $variables['picture_class']),
  ));

  $real_name_text = $real_name;
  $real_name = l($real_name, $user_profile_url, array(
    'attributes' => array('class' => $variables['name_class']),
  ));


  $dummy_name = '<span class="user-name-wrapper">'.$dummy_name.'</span>';


  // Prepare info to return
  $info_real = array(
    'display_picture' => $real_picture,
    'display_name' => $real_name,
    'display_name_text' =>  $real_name_text,
    'access account profile' => TRUE,
  );

  $info_dummy = array(
    'display_picture' => $dummy_picture,
    'display_name' => $dummy_name,
    'display_name_text' =>  $dummy_name_text,
    'access account profile' => FALSE,
  );




  // Check before return
  if (!isset($variables['user']) || !$variables['user']) {
    global $user;
  }
  else {
    $user = $variables['user'];
  }

  // Editor
  if (user_access('auto active when create journal') || $user->uid == $account->uid) {
    $info = $info_real;
  }
  // Reviewer and librarian and Researcher
  else {
    $info = $info_dummy;
  }

  // System info
  if ($variables['auto']) {
    $info['display_name'] = 'System';
    $info['display_name_text'] = 'System';
    $info['display_picture'] = strip_tags($info['display_picture'], '<img>');
  }
  return $info;

}

function open_journal_trim($text, $size=NULL) {

  $text = preg_replace( '/\s+/', ' ', strip_tags($text));
  if ($size) {
    $text = truncate_utf8($text, $size, TRUE ,TRUE ,TRUE);
  }
  return $text;
}

function open_journal_get_display_user_info_more() {
  return array('display_picture' => '...', 'display_name' => 'more people');
}



/**
 * Issue load.
 */
function open_journal_issue_load($issue_id) {
  $issue = &drupal_static(__FUNCTION__);

  if (!isset($issue)) {
    $issue = array();
  }

  if (!isset($issue[$issue_id])) {
    // Load issue.
    $issue[$issue_id] = db_query("SELECT * FROM {open_journal_issue} WHERE iid = :iid", array(':iid' => $issue_id))->fetch();

    if ($issue[$issue_id]) {
      // Load sections.
      $section_result = db_query("SELECT * FROM {open_journal_issue_section} WHERE iid = :iid ORDER BY weight ASC", array(':iid' => $issue_id));

      $sections = array();
      foreach ($section_result as $section) {
        // Load journals.
        $journal_result = db_query("SELECT jid, weight FROM {open_journal_issue_journal} WHERE sid = :sid ORDER BY weight ASC", array(':sid' => $section->sid));

        $journals = array();
        foreach ($journal_result as $journal) {

          if ($_journal = open_journal_journal_load($journal->jid)) {
            $_journal->weight = $journal->weight;
            $journals[] = $_journal;
          }
        }
        $section->journals = $journals;
        $sections[] = $section;
      }
      $issue[$issue_id]->sections = $sections;
    }
  }

  return $issue[$issue_id];
}

/**
* Return last update from discussion or comment in journal
*/
function open_journal_get_last_update($jid) {
  $sql = " SELECT
    (SELECT  max(c.changed)
    FROM open_journal_discussion d INNER JOIN open_journal_comment c ON c.did = d.did
    WHERE d.jid = :jid
    ) AS u1,

    (
    SELECT  max(d.changed)
    FROM open_journal_discussion d
    WHERE d.jid = :jid
    ) AS u2"
  ;
  $result = db_query($sql, array(':jid' => $jid));
  $result = $result->fetchAll();

  $last_update = max($result[0]->u1, $result[0]->u2);
  return $last_update;

}

/**
 * Return JSON of journals list for autocomplete.
 */
function open_journal_list_autocomplete($string = '') {
  $matches = array();

  if ($string) {

   $result = db_query("SELECT j.jid, j.title_sub, j.title_en, j.dc_language, j.dc_title, j.dc_creator
      FROM open_journal_journal j
      LEFT JOIN open_journal_issue_journal  ij
      ON j.jid = ij.jid
      WHERE ij.jid IS NULL AND j.dc_title LIKE('%".db_like($string)."%')  LIMIT 10 "
    );
    $result = $result->fetchAll();

    foreach ($result as $row) {
      $title = ($row->dc_language == 'en')? $row->title_en: $row->title_sub;
      //$title = $title.'(aaa)';

      $creator = explode(',', $row->dc_creator);
      $creator = array_filter($creator);
      if (!empty($creator)) {
        $author = ' -- '.$creator[0];
      }

      // Display Author
      $matches[$title .' [id:'. $row->jid .']'] = check_plain($title.$author);
    }
  }

  drupal_json_output($matches);
}



function open_jounal_daily_mail($data) {

  $sender = (object) array(
    'name' => 'System Mail'
  );

  $journal_list = db_query("SELECT * FROM (SELECT j.jid, MAX(d.changed) last_update FROM open_journal_journal j, open_journal_discussion d WHERE d.jid = j.jid AND j.reject = 0 AND j.withdraw = 0 AND j.sid <> :sid GROUP BY j.jid) t WHERE CEIL((unix_timestamp(CURRENT_TIMESTAMP) - t.last_update)/(60*60*24)) = ".OPEN_JOURNAL_REMINDER_DAYS, array(':sid' => open_journal_get_last_state()))->fetchAll();



  foreach ($journal_list as $journal) {
    $data = (object) array();

    $user_list = open_journal_people_active_list($journal->jid);
    $data->journal = open_journal_journal_load($journal->jid, TRUE);

    foreach ($user_list as $reciver) {

      if (!user_access('receive daily reminder email', $reciver)) {
        continue;
      }

      $data->sender = $sender;
      $data->reciver = $reciver;

      drupal_mail('open_journal', 'open_journal_reminder_daily', $reciver->mail, language_default(), $data, $sender->name.' <'.variable_get('site_mail', ini_get('sendmail_from')).'>');
    }

  }

}

function open_journal_cron() {
  //$cron_last = variable_set('open_journal_cron_last', 0);

  $cron_last = variable_get('open_journal_cron_last', 0);
  if(date('ymd', $cron_last) != date('ymd', time())) {

    open_jounal_daily_mail($journal);

    variable_set('open_journal_cron_last', REQUEST_TIME);
  }



}


function open_journal_user_access($string, $account = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }

  // User #1 has all privileges:
  if ($account->uid == 1) {
    return TRUE;
  }

  $role_permissions = user_role_permissions($account->roles);

  $perms = array();
  foreach ($role_permissions as $one_role) {
    $perms += $one_role;
  }
  

  return isset($perms[$string]);
}