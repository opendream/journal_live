<?php

// Convert to admin settings

define('OPEN_JOURNAL_PREFIX_PATH', 'journal');

define('OPEN_JOURNAL_SUB_LANG_ENABLE', TRUE);
define('OPEN_JOURNAL_SUB_LANG_CODE', 'th');
define('OPEN_JOURNAL_SUB_LANG_TEXT', 'th');
define('OPEN_JOURNAL_SUB_LANG_ABSTRACT_LABEL', 'บทคัดย่อ');
define('OPEN_JOURNAL_SUB_LANG_KEYWORDS_LABEL', 'คำสำคัญ');
define('OPEN_JOURNAL_DEFAULT_PUBLISHER_NAME', 'Health Systems Research Institute');

define('OPEN_JOURNAL_SUB_LANG_ABSTRACT_REQUIRED', TRUE);
define('OPEN_JOURNAL_SUB_LANG_KEYWORDS_REQUIRED', TRUE);
define('OPEN_JOURNAL_ABSTRACT_REQUIRED', TRUE);
define('OPEN_JOURNAL_KEYWORDS_REQUIRED', TRUE);


define('OPEN_JOURNAL_ABSTRACT_MAX_LENGTH', 2000);
define('OPEN_JOURNAL_MAX_MULTI_TEXTFIELD', 10);


// Constant

define('OPEN_JOURNAL_ALLOWED_FILE_TYPE', 'doc docx');

// Status
define('OPEN_JOURNAL_STATUS_INFORMATION_APPROVE', 0);
define('OPEN_JOURNAL_STATUS_DOCUMENT_APPROVE', 1);
define('OPEN_JOURNAL_STATUS_CATLOGUED', 2);
define('OPEN_JOURNAL_STATUS_PUBLISHED', 3);


define('OPEN_JOURNAL_DISPLAY_IMAGE_USER_LIST_LIMIT', 9);
define('OPEN_JOURNAL_LIST_IPP', 20);



define('OPEN_JOURNAL_STATUS_INFORMATON_APPROVE_KEY', 0);
define('OPEN_JOUNAL_STATUS', serialize (
  array(
    OPEN_JOURNAL_STATUS_INFORMATON_APPROVE_KEY => 'Information review',
    OPEN_JOURNAL_STATUS_DOCUMENT_APPROVE => 'Document review', 
    OPEN_JOURNAL_STATUS_CATLOGUED => 'Catalogued', 
    OPEN_JOURNAL_STATUS_PUBLISHED => 'Published',
  )
));


function open_journal_menu() {

  $arg = count(explode('/', OPEN_JOURNAL_PREFIX_PATH));

  $items[OPEN_JOURNAL_PREFIX_PATH]  = array(
    'title' => t('Journal list'),
    'page callback' => 'open_journal_list',
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
  );
  $items[OPEN_JOURNAL_PREFIX_PATH.'/list']     = $items[OPEN_JOURNAL_PREFIX_PATH];
  $items[OPEN_JOURNAL_PREFIX_PATH.'/list/all'] = $items[OPEN_JOURNAL_PREFIX_PATH];

  $items[OPEN_JOURNAL_PREFIX_PATH.'/list/%']  = array(
    'title' => t('Journal list'),
    'page callback' => 'open_journal_list',
    'page arguments' => array($arg+1),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
  );

  $items[OPEN_JOURNAL_PREFIX_PATH.'/list/%/%/%']  = array(
    'title' => t('Journal list'),
    'page callback' => 'open_journal_list',
    'page arguments' => array($arg+1, $arg+2, $arg+3),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
  );


  $items[OPEN_JOURNAL_PREFIX_PATH.'/login'] = array(
    'title' => t('Login'),
    'page callback' => 'open_journal_login',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_login_form.inc',
  );

  $items[OPEN_JOURNAL_PREFIX_PATH.'/register'] = array(
    'title' => t('Register'),
    'page callback' => 'open_journal_register',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_register_form.inc',
  );  
  $items[OPEN_JOURNAL_PREFIX_PATH.'/account/setting'] = array(
    'title' => t('Setting my account'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('open_journal_account_setting_form'),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_account_setting_form.inc',
  );

  $items[OPEN_JOURNAL_PREFIX_PATH.'/add'] = array(
    'title' => t('Add new journal'),
    'page callback' => 'open_journal_information',
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_information_form.inc',
  );

  $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal/information'] = array(
    'title' => t('Edit journal'),
    'page callback' => 'open_journal_information',
    'page arguments' => array($arg),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_information_form.inc',
  ); 

  $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal/overview'] = array(
    'title' => t('Overview'),
    'page callback' => 'open_journal_overview',
    'page arguments' => array($arg),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_overview.inc',
  ); 

  $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal/discussion'] = array(
    'title' => t('Discussions'),
    'page callback' => 'open_journal_discussion_list',
    'page arguments' => array($arg),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_status_form.inc'
  );
  $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal/discussion/list'] = $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal/discussion'];

  $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal/discussion/add'] = array(
    'title' => t('Add new discussion'),
    'page callback' => 'open_journal_discussion_add',
    'page arguments' => array($arg),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_discussion_form.inc',
  );
  
  $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal/discussion/%open_journal_discussion'] = array(
    'title' => t('Discussion detail'),
    'page callback' => 'open_journal_discussion_detail',
    'page arguments' => array($arg, $arg+2),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_comment_form.inc',
  );

  $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal/discussion/%open_journal_discussion/edit'] = array(
    'title' => t('Edit discussion'),
    'page callback' => 'open_journal_discussion_edit',
    'page arguments' => array($arg, $arg+2),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_discussion_form.inc',
  );
  
  $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal/discussion/%open_journal_discussion/delete'] = array(
    'title' => t('Delete discussion'),
    'page callback' => 'open_journal_discussion_delete',
    'page arguments' => array($arg, $arg+2),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_discussion_form.inc',
  );
  
  $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal/discussion/%open_journal_discussion/comment/%open_journal_comment/edit'] = array(
    'title' => t('Edit comment'),
    'page callback' => 'open_journal_comment_edit',
    'page arguments' => array($arg, $arg+2, $arg+4),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_comment_form.inc',
  );
  
  $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal/discussion/%open_journal_discussion/comment/%open_journal_comment/delete'] = array(
    'title' => t('Delete comment'),
    'page callback' => 'open_journal_comment_delete',
    'page arguments' => array($arg, $arg+2, $arg+4),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_comment_form.inc',
  );



  $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal/file'] = array(
    'title' => t('Files'),
    'page callback' => 'open_journal_file',
    'page arguments' => array($arg),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_file.inc',
  ); 

  $items[OPEN_JOURNAL_PREFIX_PATH.'/%open_journal_journal/people'] = array(
    'title' => t('Peoples'),
    'page callback' => 'open_journal_people',
    'page arguments' => array($arg),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/open_journal_people_form.inc',
  );
  
  $items['open_journal/avatar/%/%'] = array(
    'page callback' => 'open_journal_avatar_generate',
    'page arguments' => array(2, 3),
    'access arguments' => array('access open journal'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/identicon.inc',
  );
  
  return $items;
}

function open_journal_theme() {

  return array(
    'open_journal_login' => array(
      'variables' => array(
        'form' => NULL,
        'condition' => NULL,
      ),
      'template' => 'templates/open-journal-login',
    ),

    'open_journal_register' => array(
      'variables' => array(
        'form' => NULL,
        'condition' => NULL,
      ),
      'template' => 'templates/open-journal-register',
    ),

    'open_journal_detail' => array(
      'variables' => array(
        'jid' => NULL,
        'content' => NULL,
        'sidebar' => NULL,
        'menu_active_url' => NULL,
      ),
      'template' => 'templates/open-journal-detail',
    ),
    
    'open_journal_discussion_item' => array(
      'variables' => array(
        'item' => NULL,
        'journal' => NULL,
      ),
      'template' => 'templates/open-journal-discussion-item',
    ),

    'open_journal_comment_item' => array(
      'variables' => array(
        'item' => NULL,
        'journal' => NULL,
        'discussion' => NULL,
      ),
      'template' => 'templates/open-journal-comment-item',
    ),
    
    'open_journal_overview_content' => array(
      'variables' => array(
        'jid' => NULL,
        'abstract' => NULL,
        'last_update' => NULL,
        'update_by' =>NULL,
        'latest_file' => NULL,
        'discussion_list' => NULL,
      ),
      'template' => 'templates/open-journal-overview-content',
    ),

    'open_journal_overview_sidebar' => array(
      'variables' => array(
        'jid' => NULL,
        'status'=> NULL,
        'people_list'=> NULL,
        'information'=> NULL,
      ),
      'template' => 'templates/open-journal-overview-sidebar',
    ),

    'open_journal_discussion_detail' => array(
      'variables' => array(
        'jid' => NULL,
        'discussion_list' => NULL,
      ),
      'template' => 'templates/open-journal-discussion-detail',
    ),

    'open_journal_file' => array(
      'variables' => array(
        'journal' => NULL,
        'file_list' => array(),
      ),
      'template' => 'templates/open-journal-file',
    ),

    'open_journal_people' => array(
      'variables' => array(
        'jid' => NULL,
        'people_creator' => NULL,
        'people_contributor_list' => NULL,
      ),
      'template' => 'templates/open-journal-people',
    ),

    'open_journal_list' => array(
      'variables' => array(
        'journal_list' => NULL,
      ),
      'template' => 'templates/open-journal-list',
    ),

    'open_journal_list_item' => array(
      'variables' => array(
        'limit_start' => NULL,
        'limit_end' => NULL,
      ),
      'template' => 'templates/open-journal-list-item',
    ),
    'open_journal_discussion_list' =>array(
      'variables' => array(
        'discussion_list' => NULL,
        ),
      'template' => 'templates/open-journal-discussion-list'
      ),
    'open_journal_status_form' =>array(
      'variables' => array(
        'journal' => NULL,
        ),
      'template' => 'templates/open-journal-status-form'
      ),

  );
}

function open_journal_permission() {
  return array(
    'access open journal' => array(
      'title' => t('Access open journal'),
      'description' => t('Perform user can lonin to join open journal.'),
    ),
    'auto active when create journal' => array(
      'title' => t('Auto active when create journal'),
      'description' => t('Perform user force to active for review abstract first. Recommented for editor role.'),
    ),
    'access contributor process' => array(
      'title' => t('Access contributor process'),
      'description' => t('Perform user can see contributor real name, avatar and create contributor only discussion. Recommented for editor, reviewer, librarian roles.'),
    ),
    'invite people to journal' => array(
      'title' => t('Iinvite people to journal'),
      'description' => t('Perform user can active and deactive people to journal. Recommented for editor and some reviewer roles.'),
    ),
    'approve with unanimity and reject journal' => array(
      'title' => t('Approve with unanimity and reject journal'),
      'description' => t('Perform user can change status or reject of any journals and can see informal approved. Recommented for editor role.'),
    ),
    'informal approve journal' => array(
      'title' => t('Informal approve journal'),
      'description' => t('Perform user can informal approve journal for that user only. Recommented for reviewer role.'),
    ),
    
    // Backend permission
    'create update delete issue' => array(
      'title' => t('Create update delete issue'),
      'description' => t('Perform user can administrator issue. Recommented for webmaster role.'),
    ),
    'export issue to ojs xml format' => array(
      'title' => t('Export issue to OJS xml format'),
      'description' => t('Perform user can administrator OJS export. Recommented for webmaster role.'),
    ),
  );
}

function open_journal_preprocess_html(&$vars) {
  
  
  if (user_is_logged_in() && 
      !(in_array($_GET['q'], array(
      OPEN_JOURNAL_PREFIX_PATH.'/login', 
      OPEN_JOURNAL_PREFIX_PATH.'/register',
      'user/password')
    ) || 
    (arg(0) == 'user' && arg(1) == 'reset'))) {
    $vars['header_class'] = 'header-logged-in';
    $vars['logged_in'] = TRUE;
  }
  else {
    $vars['header_class'] = 'header-logged-out';
    $vars['logged_in'] = FALSE;
  }
  open_journal_preprocess_page($vars);
}

function open_journal_preprocess_page(&$vars) {

  $mpath = drupal_get_path('module', 'open_journal');

  if(in_array($_GET['q'], array(
      OPEN_JOURNAL_PREFIX_PATH.'/login', 
      OPEN_JOURNAL_PREFIX_PATH.'/register',
      'user/password')
    ) || 
    (arg(0) == 'user' && arg(1) == 'reset')
  ) {
    // TODO: change to settings upload file
    $vars['open_journal_logo1'] = FALSE;
    $vars['open_journal_logo2'] = theme('image', array(
      'path' => $mpath.'/images/default_logo2.png',
      'alt' => variable_get('site_name', ''),
    ));
    $vars['disabled_title'] = TRUE;
    $vars['page_class'] = 'page-sign';
  }
  else {
    $vars['open_journal_logo1'] = theme('image', array(
      'path' => $mpath.'/images/default_logo1.png',
      'alt' => variable_get('site_name', ''),
    ));
    $vars['open_journal_logo2'] = FALSE;
    $vars['disabled_title'] = FALSE;
    $vars['page_class'] = 'page-normal';

    $arg = count(explode('/', OPEN_JOURNAL_PREFIX_PATH));

    if ($_GET['q'] == OPEN_JOURNAL_PREFIX_PATH || 
        $_GET['q'] == OPEN_JOURNAL_PREFIX_PATH.'/list'  || 
        (strpos($_GET['q'], OPEN_JOURNAL_PREFIX_PATH) === 0 && is_numeric(arg($arg+1)))){
      $vars['page_class'] = 'page-normal page-journal-list';
    }

  }
   
  if (user_is_logged_in()) { 
    global $user;
  
    $dummy = open_journal_get_display_user_info($user, array('image_style' => 'open_journal_avatar_small'));
    $vars['user_info'] = $dummy;
    $vars['user_info']['display_picture_small'] = $dummy['display_picture'];
  
    $dummy = open_journal_get_display_user_info($user, array('image_style' => 'open_journal_avatar_medium'));
    $vars['user_info']['display_picture_medium'] = $dummy['display_picture'];
  
    $dummy = open_journal_get_display_user_info($user, array('image_style' => 'open_journal_avatar_large'));
    $vars['user_info']['display_picture_large'] = $dummy['display_picture'];
  }
}

function open_journal_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_pass') {
    $form['title'] = array('#markup' => '<h2>'.t('Forget password').'</h2>', '#weight' => -50);
    $form['#attached']['js'][] = drupal_get_path('module', 'open_journal').'/js/open_journal_compact.js';
    
  }
}

function open_journal_login() {
  return theme('open_journal_login', array(
    'form' => drupal_render(drupal_get_form('open_journal_login_form')),
    'condition' => 'CONDITION',
  ));
}

function open_journal_register() {
  return theme('open_journal_register', array(
    'form' => drupal_render(drupal_get_form('open_journal_register_form')),
    'condition' => 'CONDITION',
  ));
}

function open_journal_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  if (!isset($_GET['destination'])) {
    drupal_goto(OPEN_JOURNAL_PREFIX_PATH.'/account/setting');
  }
}

function open_journal_form_user_admin_settings_alter(&$form, &$form_state) {
  // reorder fieldset weights
  $form['anonymous_settings']['#weight'] = -4;
  $form['admin_role']['#weight'] = -3;
  $form['registration_cancellation']['#weight'] = -2;
  $form['nocurrent_pass_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Require Current Password'),
    '#weight' => -1,
  );
  $form['nocurrent_pass_settings']['nocurrent_pass_disabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Do not require current password'),
    '#description' => t('Check this box to disable the "current password" field on the User Edit form.'),
    '#default_value' => variable_get('nocurrent_pass_disabled', TRUE),
  );
}


function open_journal_update_field(&$data, $field_name, $field_value=NULL) {

  // Prepare variables
  $old_field_value = isset($data->{$field_name})? $data->{$field_name}: NULL;
  if (!$field_value) {
    $field_value = $old_field_value;
  }

  // Set variables
  if (is_array($field_value)) {
    $data->{$field_name} = implode(',', array_filter($field_value));
  }
  else {
    $data->{$field_name} = $field_value;
  }
}

function open_journal_get_field($data, $field_name, $default_value=NULL) {
  return isset($data->{$field_name})? $data->{$field_name}: $default_value;
}


/**
 * Journal method
 */
function open_journal_journal_load($jid) {

  // Query data from database for edit journal when have journal ID
  $data = db_select('open_journal_journal', 'j')
  ->fields('j')
  ->condition('jid', $jid, '=')
  ->execute()
  ->fetchObject();

  $data->subject_sub = explode(',' ,$data->subject_sub);
  $data->subject_en = explode(',' ,$data->subject_en);
  $data->dc_creator = explode(',' ,$data->dc_creator);
  $data->dc_publisher = explode(',' ,$data->dc_publisher);
  $data->dc_contributor = explode(',' ,$data->dc_contributor);

  

  $data->title = $data->dc_title;

  return $data;
}

function open_journal_journal_save($data, $change_status=FALSE) {

  $data->changed = REQUEST_TIME;

  open_journal_update_field($data, 'subject_en');
  open_journal_update_field($data, 'subject_sub');

  // Dublin core
  open_journal_update_field($data, 'dc_description', $data->description_sub.','.$data->description_en);
  open_journal_update_field($data, 'dc_subject', $data->subject_sub.','.$data->subject_en);
  open_journal_update_field($data, 'dc_creator');
  open_journal_update_field($data, 'dc_publisher');
  open_journal_update_field($data, 'dc_contributor');

  if (is_array($data->date)) {
    $date = (object) $data->date;
    open_journal_update_field($data, 'dc_date', mktime(0, 0, 0, $date->month, $date->day, $date->year));
  }
  else {
    open_journal_update_field($data, 'dc_date');
  }

  
  if (isset($data->file) && $data->file) {
    $file = file_load($data->file);
    if(!isset($data->dc_format)) {
     $data->dc_format = $file->filemime; 
    }
  }
  
  // Importantly, save record before save file.
  $pk = (isset($data->jid) && $data->jid)? 'jid': array();
  
  if (!$pk) {
    $data->created = REQUEST_TIME;
  }
  if (!$pk || $change_status) {
    $data->status_changed = REQUEST_TIME;
  }
  
  $data->title = $data->dc_title;
  
  $jid = drupal_write_record('open_journal_journal', $data, $pk);
  
  if (isset($data->file) && $data->file) {
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
  }
  
  // When create first
  if (!$pk) {

    // Active auto user
    global $user;
    open_journal_journal_people_active($data, $user->uid);

    $user_auto_active_list = db_query("SELECT uid FROM users_roles ur, role_permission rp WHERE rp.permission = 'auto active when create journal' AND rp.rid = ur.rid")->fetchAllKeyed(0, 0);

    foreach ($user_auto_active_list as $uid) {
      if ($user->uid != $uid) {
        open_journal_journal_people_active($data, $uid);
      }
    }

    // create first discussion.
    $discussion = array(
      'uid' => $data->uid,
      'jid' => $data->jid,
      'title' => t('New journal has been created.'),
      'description' => 'Submit new journal has been completed. Now, status is "information review".'."\n\n".'See information with abstract field and journal file on "Information" tab.'."\n".url('journal/'.$data->jid.'/information', array('absolute' => TRUE)),
      'fid' => $data->file,
      'contributor_only' => 0,
      'created' => $data->created,
      'permanent' => 1
    );
    $discussion = (object) $discussion;
    open_journal_discussion_save($discussion);

  }


  return $data;

}

/**
 * Journal people method
 */
function open_journal_journal_people_active($journal, $uid) {
    
  $journal = is_numeric($journal)? open_journal_journal_load($journal): $journal;
  
  $data = array(
    'joined' => REQUEST_TIME,
    'jid' => $journal->jid,
    'uid' => $uid,
  );
  
  db_merge('open_journal_journal_people')
    ->key(array(
      'jid' => $journal->jid,
      'uid' => $uid,
    ))
    ->fields($data)
    ->execute();
  
  
  $data = (object) $data;
  $data->journal = $journal;
  
  open_journal_people_mail($data);
}

function open_journal_journal_people_deactive($jid, $uid) {
  db_delete('open_journal_journal_people')
    ->condition('jid', $jid)
    ->condition('uid', $uid)
    ->execute();
}

function open_journal_people_mail($data) {
  
  global $user;
  
  $sender = $user;
  $reciver = user_load($data->uid);
  
  if ($sender->uid != $reciver->uid) {
    
    $sender_info = open_journal_get_display_user_info($sender, array('user' => $reciver));
    $sender->name = $sender_info['display_name_text'];

    $data->sender = $sender;
    
    drupal_mail('open_journal', 'open_journal_people_invite', $reciver->mail, language_default(), $data, $sender->name.' <'.variable_get('site_mail', ini_get('sendmail_from')).'>');
  }
  
}

/**
 * Discussion method
 */
function open_journal_discussion_load($did) {

  // Query data from database for edit journal when have journal ID
  $data = db_select('open_journal_discussion', 'd')
  ->fields('d')
  ->condition('did', $did, '=')
  ->execute()
  ->fetchObject();

  return $data;
}

function open_journal_discussion_load_limit($jid, $limit=NULL) {

  // Query data from database for overview discussion
  $data = db_select('open_journal_discussion', 'd')
  ->fields('d')
  ->condition('jid', $jid, '=')
  ->orderBy('did', 'DESC')
  ->range(0,$limit)
  ->execute()
  ->fetchAll();

  return $data;
}

function open_journal_discussion_load_all($jid) {

  // Query data from database for overview discussion
  $data = db_select('open_journal_discussion', 'd')
  ->fields('d')
  ->condition('jid', $jid, '=')
  ->orderBy('did', 'DESC')
  ->execute()
  ->fetchAll();

  return $data;
}




function open_journal_discussion_save($data) {
  
  $data->changed = REQUEST_TIME;

  // Default value
  $data->fid = isset($data->fid)? $data->fid: 0;
  $data->contributor_only = isset($data->contributor_only)? $data->contributor_only: 0;
  $data->permanent = isset($data->permanent)? $data->permanent: 1;

  global $user;
  $data->uid = isset($data->uid)? $data->uid: $user->uid;


  if ($data->fid) {
    $file = file_load($data->fid);
  }
  
  // Importantly, save record before save file.
  $pk = (isset($data->did) && $data->did)? 'did': array();
  
  if (!$pk) {
    $data->created = REQUEST_TIME;
  }
  
  drupal_write_record('open_journal_discussion', $data, $pk);
  
  if ($data->fid) {
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
    file_usage_add($file, 'open_journal', 'discussion', $data->did);
    
  }
  
  $data->is_new = !$pk;
  if ($data->is_new) {
    open_jounal_discussion_mail($data);
  }

  return $data;
}

// Send mail function 
function open_jounal_discussion_mail($data) {
  
  $user_list = open_journal_people_active_list($data->jid, $data->uid);
  $sender = user_load($data->uid);
  $data->journal = open_journal_journal_load($data->jid);
  
  $org_name = $sender->name;

  foreach ($user_list as $reciver) {
    
    $sender->name = $org_name;
    $sender_info = open_journal_get_display_user_info($sender, array('user' => $reciver));
    $sender->name = $sender_info['display_name_text'];
    
    $data->sender = $sender;
    
    if ($data->contributor_only && !user_access('access contributor process', $reciver)) {
      drupal_mail('open_journal', 'open_journal_discussion_add', $reciver->mail, language_default(), $data, $sender->name.' <'.variable_get('site_mail', ini_get('sendmail_from')).'>');
    }
  }

} 


/**
 * Comment method
 */
function open_journal_comment_load($cid) {

  // Query data from database for edit journal when have journal ID
  $data = db_select('open_journal_comment', 'c')
  ->fields('c')
  ->condition('cid', $cid, '=')
  ->execute()
  ->fetchObject();

  return $data;
}

function open_journal_comment_load_all($did) {

  // Query data from database for overview discussion
  $data = db_select('open_journal_comment', 'c')
  ->fields('c')
  ->condition('did', $did, '=')
  ->orderBy('cid', 'ASC')
  ->execute()
  ->fetchAll();

  return $data;
}

function open_journal_comment_save($data) {
  
  $data->changed = REQUEST_TIME;


  if ($data->fid) {
    $file = file_load($data->fid);
  }
  
  // Importantly, save record before save file.
  $pk = (isset($data->cid) && $data->cid)? 'cid': array();
  
  if (!$pk) {
    $data->created = REQUEST_TIME;
  }
  
  drupal_write_record('open_journal_comment', $data, $pk);
  
  if ($data->fid) {
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
    file_usage_add($file, 'open_journal', 'comment', $data->cid);
    
  }
  
  $data->is_new = !$pk;
  if ($data->is_new) {
    open_jounal_comment_mail($data);
  }

  return $data;
}

function open_jounal_comment_mail($data) {
    
  $sender = user_load($data->uid);
  $data->discussion = open_journal_discussion_load($data->did);
  $data->journal = open_journal_journal_load($data->discussion->jid);
  
  $user_list = open_journal_people_active_list($data->journal->jid, $data->uid);
  
  $org_name = $sender->name;

  foreach ($user_list as $reciver) {
    
    $sender->name = $org_name;
    $sender_info = open_journal_get_display_user_info($sender, array('user' => $reciver));
    $sender->name = $sender_info['display_name_text'];
    
    $data->sender = $sender;
    
    if ($data->discussion->contributor_only && !user_access('access contributor process', $reciver)) {
      drupal_mail('open_journal', 'open_journal_comment_add', $reciver->mail, language_default(), $data, $sender->name.' <'.variable_get('site_mail', ini_get('sendmail_from')).'>');
    }
  }

}

/**
 * Mail method
 */
function open_journal_mail($key, &$message, $data) {

  $site_name = variable_get('site_name', t('E-Journal'));

  switch ($key) {
    case 'open_journal_discussion_add':
      //$message['subject'] = '['.truncate_utf8($data->journal->title, 10, FALSE, TRUE).']'.$data->title;
      $message['subject'] = open_journal_trim($data->journal->title, 20).' - '.open_journal_trim($data->title);

      $body = "\n";
      $body .= "\n".'Journal: '.$data->journal->title;
      $body .= "\n".'------------------------------------------------------------------------';
      $body .= "\n";
      if ($data->is_new) {
      $body .= "\n".'Start discussion by : '.$data->sender->name;
      }
      else {
      $body .= "\n".'Update discussion by : '.$data->sender->name;
      }
      $body .= "\n".'Title: '.open_journal_trim($data->title);
      if (open_journal_trim($data->description)) {
        $body .= "\n".'------------------------------------------------------------------------';
        $body .= "\n";
        $body .= "\n".$data->description;
        $body .= "\n";
      }
      $body .= "\n".'------------------------------------------------------------------------';
      $body .= "\n".'View more detail on '.$site_name.': ';
      $body .= "\n".url(OPEN_JOURNAL_PREFIX_PATH.'/'.$data->journal->jid.'/discussion/'.$data->did, array('absolute' => TRUE));


      $message['body'][] = $body;
      
      break;
    
    case 'open_journal_comment_add':
    
      $message['subject'] = 'Re: '.open_journal_trim($data->journal->title, 20).' - '.open_journal_trim($data->discussion->title);

      $body = "\n";
      $body .= "\n".'Journal: '.$data->journal->title;
      $body .= "\n";
      $body .= "\n".'Re: '.$data->discussion->title;
      $body .= "\n".'------------------------------------------------------------------------';
      $body .= "\n";
      $body .= "\n".$data->sender->name.': '.$data->message;
      $body .= "\n";
      $body .= "\n".'------------------------------------------------------------------------';
      $body .= "\n".'View more detail on '.$site_name.': ';
      $body .= "\n".url(OPEN_JOURNAL_PREFIX_PATH.'/'.$data->journal->jid.'/discussion/'.$data->did, array('absolute' => TRUE));


      $message['body'][] = $body;
      
      break;
    
    case 'open_journal_people_invite':
    
      $message['subject'] = "You're invited to journal: ".open_journal_trim($data->journal->title, 20);
      
      $body = "\n";
      $body .= "\n".$data->sender->name. " invited you to a journal named '".$data->journal->title."'";
      $body .= "\n";
      $body .= "\n".'Visit the journal to get started:';
      $body .= "\n".url(OPEN_JOURNAL_PREFIX_PATH.'/'.$data->journal->jid, array('absolute' => TRUE));
      
      break;
  }
  
}


/**
 * People method
 */
function open_journal_people_active_list($jid, $exclude=array() , $uid=FALSE, $limit=FALSE) {
  global $user;
  $exclude = !is_array($exclude)? array($exclude): $exclude;

  $user_list = db_select('open_journal_journal_people', 'jp');
  $user_list->fields('jp', array('uid'));
  $user_list->condition('jid', $jid, '=');
  if($uid) {
    $user_list->orderBy('uid = '.$uid, 'DESC');
  }
  $user_list->orderBy(' uid = '.$user->uid, 'DESC');

  if($limit) {
    $user_list->range(0, $limit);
  }
  $user_list = $user_list->execute();

  $user_list = $user_list->fetchAllKeyed(0, 0);
  
  $user_list = array_values($user_list);
  $user_list = array_diff($user_list, $exclude);
  
  return array_values(user_load_multiple($user_list));
}

function open_journal_people_active_with_joined($jid) {
  $user_list = db_select('open_journal_journal_people', 'jp');
  $user_list->fields('jp', array('uid', 'joined'));
  $user_list->condition('jid', $jid, '=');
  $user_list = $user_list->execute();
  $user_list = $user_list->fetchAll();
  
  return $user_list;
}

function open_journal_people_contributor_list($journal) {
  
  $user_contributor_list = db_query(
   "SELECT 
      DISTINCT(uid) 
    FROM 
      users_roles ur, role_permission rp 
    WHERE 
      (
        rp.permission = 'access contributor process' OR 
        rp.permission = 'auto active when create journal' OR 
        rp.permission = 'approve with unanimity and reject journal' OR 
        rp.permission = 'informal approve journal'
      ) AND 
      rp.rid = ur.rid")->fetchAllKeyed(0, 0);

  foreach ($user_contributor_list as $key => $uid) {
    if ($journal->uid == $uid) {
      unset($user_contributor_list[$key]);
    }
  }
  
  return array_values(user_load_multiple($user_contributor_list));
  
}

function open_journal_people_sort($people1, $people2) {
    if ($people1->joined == $people2->joined) {
        return 0;
    }
    if ($people1->joined === 0) {
      $people1->joined = 999999999999;
    }
    if ($people2->joined === 0) {
      $people2->joined = 999999999999;
    }
    return ($people1->joined < $people2->joined) ? -1 : 1;
}

function open_journal_people($journal) {
  $people_contributor_list = open_journal_people_contributor_list($journal);
  $people_active_list = open_journal_people_active_with_joined($journal->jid);
  

  $people_active_uid_key_list = array();
  foreach ($people_active_list as $people) {
    $people_active_uid_key_list[$people->uid] = $people;
  }
  
  $can_invite = user_access('invite people to journal');
  
  foreach ($people_contributor_list as $key => &$people) {
    
    $people->active_in_journal = isset($people_active_uid_key_list[$people->uid])? TRUE: FALSE;
    
    
    if ($people->active_in_journal) {
      $people->add_class = ' active-people';
      $people->joined = $people_active_uid_key_list[$people->uid]->joined;
    }
    else {
      
      if (!$can_invite) {
        unset($people_contributor_list[$key]);
        continue;
      }
      
      $people->add_class = ' inactive-people';
      $people->joined = 0;
    }
    
    $people->user_info = open_journal_get_display_user_info($people, array('image_style' => 'open_journal_avatar_large'));
    
    $people->form = '';
    if ($can_invite) {
      $people->form = drupal_render(drupal_get_form('open_journal_people_form', $journal->jid, $people->uid, $people->active_in_journal));
    }
  }
  
  $people_creator = user_load($journal->uid);
  $people_creator->user_info = open_journal_get_display_user_info($people_creator, array('image_style' => 'open_journal_avatar_large'));
  $people_creator->joined = isset($people_active_uid_key_list[$people_creator->uid])? $people_active_uid_key_list[$people_creator->uid]->joined: $journal->created;
  
  usort($people_contributor_list, 'open_journal_people_sort');
      
  return theme('open_journal_detail', array(
    'jid' => $journal->jid,
    'content' => theme('open_journal_people', array(
      'people_creator' => $people_creator,
      'people_contributor_list' => $people_contributor_list,
    )),
  ));
}


function open_journal_information($data=NULL) {


  
  return theme('open_journal_detail', array(
    'content' => drupal_render(drupal_get_form('open_journal_information_form',$data)),
    'sidebar' => '',
    'jid' => open_journal_get_field($data, 'jid'),
  ));
}

function open_journal_overview($journal) {

  // get data from last discussion
  $file_last = open_journal_get_file_list($journal->jid, 1);
  // get data from discussion limit for display overview page
  $limit_overview_page = 3;
  $discussion = open_journal_discussion_load_limit($journal->jid, $limit_overview_page);
  // Prepare data send to theme 
  $discussion_data = array();
  $i = 0;
  foreach($discussion as $row) {
    $user = user_load($row->uid);
    $discussion_data[$i]['did'] = $row->did;
    $discussion_data[$i]['user_info'] = open_journal_get_display_user_info($user);
    $discussion_data[$i]['title'] = open_journal_trim($row->title, 50);
    $discussion_data[$i]['description'] = open_journal_trim($row->description, 100);
    $discussion_data[$i]['url'] = '';
    $discussion_data[$i]['jid'] = $journal->jid;
    $i++;
  }
  // calculate total more link to discussion journal
  $more_discussion = count(open_journal_discussion_load_all($journal->jid))-$limit_overview_page;
  // get user and file data
  $user = user_load($file_last[0]->uid);
  $file = file_load($file_last[0]->fid);
  $status_list = unserialize(OPEN_JOUNAL_STATUS);

  // Get status name and class
  $status_attributes = (object) open_journal_get_status_attributes($journal);
  $journal->status_class = $status_attributes->class;
  $journal->status_name  = $status_attributes->name;


  $status = array(
    'name'      => $status_attributes->name,
    'class'     => $status_attributes->class,
    'updated'   => date('d M Y', $journal->status_changed),
    'created'   => date('d M Y', $journal->created),
    'status_id' => $journal->status,
  );
  // Prepare people list  send to theme
  $people = open_journal_people_active_list($journal->jid, NULL, $journal->uid, OPEN_JOURNAL_DISPLAY_IMAGE_USER_LIST_LIMIT);
  $people_list = array();
  $count_all_people = count(open_journal_people_active_list($journal->jid));

  $i = 0;
  $more_people = FALSE;
  foreach($people as $row) {

    $user_p = user_load($row->uid);
    $people_list[$i]['user_info'] = open_journal_get_display_user_info($user_p, array('owner_uid' => $journal->uid));
    $people_list[$i]['uid'] = $row->uid;

    $i++;
  }
  if($count_all_people > OPEN_JOURNAL_DISPLAY_IMAGE_USER_LIST_LIMIT) {
    $people_list['more_people']['user_info'] = open_journal_get_display_user_info_more();
    $more_people = TRUE;
  }
  if(OPEN_JOURNAL_SUB_LANG_ENABLE && $journal->dc_language != 'en') {
    $abstract = $journal->description_sub;
  }
  else {
    $abstract = $journal->description_en;
  }
  // Prepare information sidebar 
  $information = (object) array();
  $information_field = open_journal_get_field_settings();

  
  if($information_field['dc_subject']) {
    if(OPEN_JOURNAL_SUB_LANG_ENABLE) {
      $information->subject_sub['value'] = implode(", ", $journal->subject_sub);
      $information->subject_sub['label'] = OPEN_JOURNAL_SUB_LANG_KEYWORDS_LABEL;
    }
    $information->subject_en['value'] = implode(", ", $journal->subject_en);
    $information->subject_en['label'] = 'Keywords';
  }

  if($information_field['dc_creator']) {
    $author = array_shift($journal->dc_creator);
    $information->dc_author['value'] = $author;
    $information->dc_author['label'] = 'Author';

    $information->dc_co_author['value'] = implode(", ", $journal->dc_creator);
    $information->dc_co_author['label'] = 'Co-Author';
  }

  if($information_field['dc_publisher']) {
    $information->dc_publisher['value'] = implode(", ", $journal->dc_publisher);
    $information->dc_publisher['label'] = 'Publisher';
  }
  if($information_field['dc_contributor']) {
    $information->dc_contributor['value'] = implode(", ", $journal->dc_contributor);
    $information->dc_contributor['label'] = 'Contributors';
  }
  if($information_field['dc_date']) {
    $information->dc_date['value'] = date('d M Y',$journal->dc_date);
    $information->dc_date['label'] = 'Date';
  }
  if($information_field['dc_language']) {
    $information->dc_language['value'] = $journal->dc_language;
    $information->dc_language['label'] = 'language';
  }
  if($information_field['dc_coverage']) {
    $information->dc_coverage['value'] = $journal->dc_coverage;
    $information->dc_coverage['label'] = 'Covreage';
  }
  if($information_field['dc_identifier']) {
    $information->dc_identifier['value'] = $journal->dc_identifier;
    $information->dc_identifier['label'] = 'Final URL';
  }
  if($information_field['dc_type']) {
    $information->dc_type['value'] = $journal->dc_type;
    $information->dc_type['label'] = 'Type';
  }
  if($information_field['dc_format']) {
    $information->dc_format['value'] = $journal->dc_format;
    $information->dc_format['label'] = 'Format';
  }
  
  if($information_field['dc_source']) {
    $information->dc_source['value'] = implode(", ", $journal->dc_source);
    $information->dc_source['label'] = 'Source';
  }
  
  if($information_field['dc_relation']) {
    $information->dc_relation = implode(", ", $journal->dc_relation);
    $information->dc_relation['label'] = 'Relation';
  }
  
  if($information_field['dc_right']) {
    $information->dc_right['value'] = $journal->dc_right;
    $information->dc_right['label'] = 'Right';
  }
  

  
  //  display language
  if($information->dc_language['value'] == OPEN_JOURNAL_SUB_LANG_CODE) {
    $information->dc_language['value'] = OPEN_JOURNAL_SUB_LANG_TEXT;
    $abstract_label = OPEN_JOURNAL_SUB_LANG_ABSTRACT_LABEL;
  }
  else {
    $information->dc_language['value'] = 'Enligsh'; 
    $abstract_label = 'Abstract';
  }

 
  return theme('open_journal_detail', array(
    'content' => theme('open_journal_overview_content', array(
      'jid' => $journal->jid,
      'abstract' => $abstract,
      'last_update' => date('d M Y', $file_last[0]->created),
      'update_by' => $user->name,
      'latest_file' => file_create_url($file->uri),
      'discussion_data' => $discussion_data,
      'more_discussion' => $more_discussion,
      'abstract_label' => $abstract_label,
      )
    ),
    'sidebar' => theme('open_journal_overview_sidebar', array(
      'jid' => $journal->jid,
      'status' => $status,
      'people_list' => $people_list,
      'information' => $information,
      'more_people' => $more_people,
      'uid' => $journal->uid,
      )
    ),
    'jid' => $journal->jid
  ));
}

function open_journal_discussion_list($journal) {
  $mpath = drupal_get_path('module', 'open_journal');
  drupal_add_js($mpath.'/js/open_journal_status_sidebar.js');
  drupal_add_js($mpath.'/js/jquery.qtip.min.js');

  // Query discussion list 
  $sql = " SELECT 
    max(d.did) as  did,
    max(c.cid) as cid,
    if(c.cid IS NOT NULL, c.uid, d.uid) as user
    
    FROM 
      open_journal_discussion d
    LEFT JOIN
      open_journal_comment c
    ON
      d.did = c.did
    LEFT JOIN
      users u
    ON 
      c.uid = u.uid OR
      d.uid = u.uid
    
    WHERE 
      d.jid = ".$journal->jid." 

  GROUP BY d.did
  ORDER BY d.did DESC";

  $discussion_list = db_query($sql)->fetchAll();

  foreach ($discussion_list as &$discussion_item) {
    
    $discussion = open_journal_discussion_load($discussion_item->did);
    
    if(isset($discussion_item->cid)) {
     $latest_comment = open_journal_comment_load($discussion_item->cid);
     $discussion->description = $latest_comment->message;
    }
    
    $discussion->description = open_journal_trim($discussion->description, 100);
    $discussion->title = open_journal_trim($discussion->title, 50);
    
    if(isset($discussion_item->user)) {
      $discussion->user = open_journal_get_display_user_info($discussion_item->user);
    }
    
    $discussion_item = $discussion;
    
  }



  return theme('open_journal_detail', array(
    'content' => theme('open_journal_discussion_list', array(
      'menu_active_url' => OPEN_JOURNAL_PREFIX_PATH.'/'.$journal->jid.'/discussion',
      'discussion_list' => $discussion_list,
      'jid' => $journal->jid,
    )),
    'sidebar' => theme('open_journal_status_form', open_journal_get_status_form_variables($journal)),
    'jid' => $journal->jid
  ));

  
}

function open_journal_get_status_form_variables($journal) {
  
  // Prepare data to status side bar form
  $status_list = unserialize(OPEN_JOUNAL_STATUS);
  
  $vars = array();
  
  $vars['status_list'] = $status_list;
  $vars['journal'] = $journal;
  
  if (user_access('approve with unanimity and reject journal') && !$journal->reject) {
    $vars['next_status'] = open_journal_next_status($journal->status);
    $vars['reject_form'] = drupal_render(drupal_get_form('open_journal_reject_sidebar_form', $journal));
    $vars['approve_form'] = drupal_render(drupal_get_form('open_journal_approve_sidebar_form', $journal, $vars['next_status']));
    $vars['status_add_class'] = ' can-approve';
  }
  else {
    $vars['reject_form'] = '';
    $vars['approve_form'] = '';
    $vars['status_add_class'] = ' no-approve';
  }
  
  return $vars;
}

function open_journal_next_status($status) {
  $status_list = unserialize(OPEN_JOUNAL_STATUS);
  if($status == count($status_list)-1) {
  }
  else {
    $status++;
  }
  return $status;

}

function open_journal_get_comment_field($cid, $field) {
  $sql = " SELECT ".$field."  FROM open_journal_comment WHERE  cid=".$cid."  ";
  $result = db_query($sql)->fetchAll();
  return $result[0]->$field;
}

function open_journal_get_discussion_field($did, $field) {
  $sql = " SELECT ".$field."  FROM open_journal_discussion WHERE  did=".$did."  ";
  $result = db_query($sql)->fetchAll();
  return $result[0]->$field;
}
function open_journal_discussion_add($journal) {

  return theme('open_journal_detail', array(
    'menu_active_url' => OPEN_JOURNAL_PREFIX_PATH.'/'.$journal->jid.'/discussion',
    'content' => drupal_render(drupal_get_form('open_journal_discussion_form', $journal)),
    'sidebar' => '<h3>Note</h3><p>Dummy content</p>'.theme('open_journal_status_form', array('jid' => $journal->jid)),
    'jid' => $journal->jid

  ));
}

function open_journal_discussion_edit($journal, $discussion) {

  return theme('open_journal_detail', array(
    'menu_active_url' => OPEN_JOURNAL_PREFIX_PATH.'/'.$journal->jid.'/discussion',
    'content' => drupal_render(drupal_get_form('open_journal_discussion_form', $journal, $discussion)),
    'sidebar' => '<h3>Note</h3><p>Dummy content</p>'.theme('open_journal_status_form', array('jid' => $journal->jid)),
    'jid' => $journal->jid

  ));
}

function open_journal_discussion_delete($journal, $discussion) {

  return theme('open_journal_detail', array(
    'menu_active_url' => OPEN_JOURNAL_PREFIX_PATH.'/'.$journal->jid.'/discussion',
    'content' => drupal_render(drupal_get_form('open_journal_discussion_delete_form', $journal, $discussion)),
    'sidebar' => '<h3>Note</h3><p>Dummy content</p>'.theme('open_journal_status_form', array('jid' => $journal->jid)),
    'jid' => $journal->jid

  ));
}

function open_journal_comment_edit($journal, $discussion, $comment) {

  return theme('open_journal_detail', array(
    'menu_active_url' => OPEN_JOURNAL_PREFIX_PATH.'/'.$journal->jid.'/discussion',
    'content' => drupal_render(drupal_get_form('open_journal_comment_form', $journal, $discussion, $comment)),
    'sidebar' => '<h3>Note</h3><p>Dummy content</p>'.theme('open_journal_status_form', array('jid' => $journal->jid)),
    'jid' => $journal->jid

  ));
}

function open_journal_comment_delete($journal, $discussion, $comment) {

  return theme('open_journal_detail', array(
    'menu_active_url' => OPEN_JOURNAL_PREFIX_PATH.'/'.$journal->jid.'/discussion',
    'content' => drupal_render(drupal_get_form('open_journal_comment_delete_form', $journal, $discussion, $comment)),
    'sidebar' => '<h3>Note</h3><p>Dummy content</p>'.theme('open_journal_status_form', array('jid' => $journal->jid)),
    'jid' => $journal->jid

  ));
}

function open_journal_discussion_remove($did) {
  db_delete('open_journal_discussion')
    ->condition('did', $did)
    ->execute();
}

function open_journal_discussion_detail($journal, $discussion) {
  
  global $user;
  
  $discussion->user_info = open_journal_get_display_user_info($discussion->uid);
  $discussion->description = check_markup($discussion->description);
  $discussion->file = $discussion->fid? file_load($discussion->fid): NULL;
  $discussion->can_edit = $user->uid == $discussion->uid;
  
  $comment_list = open_journal_comment_load_all($discussion->did);
  foreach ($comment_list as &$comment) {
    $comment->user_info = open_journal_get_display_user_info($comment->uid);
    $comment->message = check_markup($comment->message);
    $comment->file = $comment->fid? file_load($comment->fid): NULL;
    $comment->can_edit = $user->uid == $comment->uid;
  }
    
  return theme('open_journal_detail', array(
    'menu_active_url' => OPEN_JOURNAL_PREFIX_PATH.'/'.$journal->jid.'/discussion',
    'content' => theme('open_journal_discussion_detail', array(
      'journal' => $journal,
      'discussion' => $discussion,
      'current_user_info' => open_journal_get_display_user_info($user),
      'comment_form' => drupal_render(drupal_get_form('open_journal_comment_form', $journal, $discussion)),
      'comment_list' => $comment_list,
    )),
    'sidebar' => theme('open_journal_status_form', array('jid' => $journal->jid)),
    'jid' => $journal->jid,
  ));
}

function open_journal_get_active_menu_attributes($menu_active_url) {
  if (strpos($_GET['q'], $menu_active_url) === 0) {
    return array('attributes' => array('class' => array('active')));
  }
  return array();
}

function open_journal_get_file_list($jid, $limit=NULL) {
  $file_list = db_query(
   "SELECT 
      u.*, IF(d.fid IS NOT NULL, d.fid, c.fid) AS fid, f.filename, f.filesize, f.uri, f.timestamp
    FROM 
      open_journal_discussion d
    LEFT JOIN
      open_journal_comment c
    ON
      d.did = c.did
    LEFT JOIN
      users u
    ON 
      c.uid = u.uid OR
      d.uid = u.uid
    INNER JOIN
      file_managed f
    ON 
      c.fid = f.fid OR
      d.fid = f.fid
    WHERE 
      d.jid = :jid AND 
      (c.fid IS NOT NULL OR d.fid IS NOT NULL)
    ORDER BY c.created, d.created DESC".($limit? (' LIMIT 0, '.$limit): ''), 
    array(':jid' => $jid)
  )->fetchAll();

  return $file_list;
}

function open_journal_file($journal) {
  
  $file_list = open_journal_get_file_list($journal->jid);
  
  foreach ($file_list as &$file) {
    
    $account = (object) array(
      'uid' => $file->uid,
      'name' => $file->name,
      'picture' => $file->picture,
      'data' => $file->data,
    );
    $file->user_info = open_journal_get_display_user_info($account);
  }
  
  return theme('open_journal_detail', array(
    'content' => theme('open_journal_file', array(
      'file_list' => $file_list,
      'journal' => $journal,
      'file_icon' => theme('image', array(
        'path' => drupal_get_path('module', 'open_journal').'/images/ic-has-file.png',
        'alt' => 'has file attach',
      )),
    )),
    'jid' => $journal->jid
  ));
}



function open_journal_load_multiple($user, $after_jid=NULL, $limit=NULL, $status='all') {
   // Query data from database for edit journal when have journal ID
  $query_var = array(
  ':uid' => $user->uid,
  );
  $sql = 
   "SELECT j.* 
    FROM 
      {open_journal_journal_people} jp 
    LEFT JOIN 
      {open_journal_journal} j 
    ON 
      jp.jid = j.jid
    WHERE 
      jp.uid = :uid";

  if($status != 'all') {
    $sql .= " AND j.status = :sid ";
    $query_var[':sid'] = $status;
  }    

  if($after_jid !== NULL) {
    $sql .= " AND j.jid < :jid ";
    $query_var[':jid'] = $after_jid;
  }
  $sql .= " ORDER BY j.jid DESC";

  if($limit) {
    $sql .= " LIMIT 0, ".$limit;
  }

  $result = db_query($sql, $query_var)->fetchAll();
 
  
  return $result;
}

function open_journal_get_status_attributes($journal) {
  
  $status_list = unserialize(OPEN_JOUNAL_STATUS);

  if($journal->reject) {
    $class = 'reject';
    $name = 'Reject';
  }
  else {
    $class = $journal->status;
    $name = $status_list[$journal->status];
  }
  return array('class' => $class, 'name' => $name);
}

function open_journal_list($status='all', $after_jid=NULL, $limit=OPEN_JOURNAL_LIST_IPP) {
  drupal_set_title('');

  global $user;
  $mpath = drupal_get_path('module', 'open_journal');
  drupal_add_js($mpath.'/js/open_journal_list_load_more.js');
  
  // TODO: Refactor to use COUNT function in SQL
  $list = open_journal_load_multiple($user);
  $count_journal = count($list);
  $status_list = unserialize(OPEN_JOUNAL_STATUS);

  $current_status_name = isset($status_list[$status]) ? $status_list[$status]: 'All Journals';

  
  $user_info = open_journal_get_display_user_info($user , array('image_style' => 'open_journal_avatar_large'));
  
  $journal_list = open_journal_load_multiple($user, $after_jid, $limit, $status);

  foreach ($journal_list as &$journal) {

    // Get status name and class
    $status_attributes = (object) open_journal_get_status_attributes($journal);
    $journal->status_class = $status_attributes->class;
    $journal->status_name  = $status_attributes->name;

    $journal->people_list = open_journal_people_active_list($journal->jid, NULL, $journal->uid, OPEN_JOURNAL_DISPLAY_IMAGE_USER_LIST_LIMIT+1);
    foreach ($journal->people_list as &$people) {
      $people->display_info = open_journal_get_display_user_info($people, array('owner_uid' => $journal->uid));
    }
    
    if (count($journal->people_list) > OPEN_JOURNAL_DISPLAY_IMAGE_USER_LIST_LIMIT) {
      array_pop($journal->people_list);
      $journal->people_list['more'] = open_journal_get_display_user_info_more();
    }
    $count_all_people = count(open_journal_people_active_list($journal->jid));

  }
  // Check rander load more
  // TODO: has_more_page checker better performance

  $has_more_page = $count_journal && open_journal_load_multiple($user, $journal->jid, $limit, $status);
  $update_load_more_url = FALSE;

  if ($has_more_page) {
    $update_load_more_url = url(OPEN_JOURNAL_PREFIX_PATH.'/list/'.$status.'/'.$journal->jid.'/'.$limit);
  }


  // render json respone for load mor ajax
  if (isset($_GET['ajax']) && $_GET['ajax']) {

    foreach ($journal_list as &$journal) {
      $journal = theme('open_journal_list_item', array('journal' => $journal));
    }

    $response = array(
      'item_list' => $journal_list,
      'update_load_more_url' => $update_load_more_url
    );

    drupal_json_output($response);
    exit();
  }

  // TODO: Edit hook theme with default value foward
  return theme('open_journal_list', array(
    'journal_list' => $journal_list,
    'user_info' => $user_info,
    'count_journal' => $count_journal,
    'limit' => OPEN_JOURNAL_LIST_IPP,
    'update_load_more_url' => $update_load_more_url,
    'status_list' => $status_list,
    'current_status_name' => $current_status_name,
    'status' => $status,

  ));

}



function open_journal_get_field_settings() {
  // DC field settings
  return array(
    'dc_title'       => 1,
    'dc_creator'     => 1,
    'dc_subject'     => 1,
    'dc_description' => 1,
    'dc_publisher'   => 1,
    'dc_contributor' => 1,
    'dc_date'        => 1,
    'dc_type'        => 1,
    'dc_format'      => 1,
    'dc_identifier'  => 1,
    'dc_source'      => 0,
    'dc_language'    => 1,
    'dc_relation'    => 0,
    'dc_coverage'    => 1,
    'dc_right'      => 1,
  );
}

function open_journal_image_default_styles() {
  $styles = array();

  $styles['open_journal_avatar_small'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 32,
          'height' => 32,
        ),
        'weight' => 0,
      ),
    ),
  );
  $styles['open_journal_avatar_medium'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 40,
          'height' => 40,
        ),
        'weight' => 0,
      ),
    ),
  );
  $styles['open_journal_avatar_large'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 73,
          'height' => 73,
        ),
        'weight' => 0,

      ),
    ),
  );
  return $styles;
}

function open_journal_get_real_name($account) {
  $real_name = '';
  if (isset($account->data['firstname']) && $account->data['firstname']) {
    $real_name .= $account->data['firstname'];
  }
  
  if (isset($account->data['lastname']) && $account->data['lastname'] && $real_name) {
    $real_name .= ' '.truncate_utf8($account->data['lastname'], 1).'.';
  }
  elseif (isset($account->data['lastname']) && $account->data['lastname'] && !$real_name) {
    $real_name .= $account->data['lastname'];
  }
  else {
    $real_name .= $account->name;
  }
  
  return $real_name;
}

/**
 * $account require uid, name, (obj|str) data, (obj|int) picture
 */
function open_journal_get_display_user_info($account, $variables=array()) {
  
  $account = is_numeric($account)? user_load($account): $account;
  
  $default_variables = array(
    'image_style' => 'open_journal_avatar_medium', 
    'user' => NULL, 
    'picture_class' => array(), 
    'name_class' => array(), 
    'name_class' => array(),
    'owner_uid' => NULL
  );
  
  $variables = array_merge($default_variables, $variables);
  

  $image_style = image_style_load($variables['image_style']);
  $size = array();
  if ($width = $image_style['effects'][0]['data']['width']) {
    $size[] = $width;
  }
  if ($height = $image_style['effects'][0]['data']['height']) {
    $size[] = $height;
  }
  $size = min($size);
  
  
  // Prepare name and picture to display
  $real_name = open_journal_get_real_name($account);
    
  $dummy_name = $account->name;
  $dummy_name_text = $dummy_name;
  $dummy_picture = theme('image', array(
    //'path' => 'http://www.gravatar.com/avatar/'.md5(strtolower(trim($account->uid))).'?d=identicon&f=y&size='.$size,
    'path' => 'open_journal/avatar/'.md5(strtolower(trim($account->name))).'/'.$size.'.png',
    'width' => $size,
    'height' => $size,
    'alt' => $dummy_name,
    'title' => $dummy_name,
  ));
  
    
  if (!$account->picture) {
    $real_picture = theme('image', array(
      //'path' => 'http://www.gravatar.com/avatar/'.md5(strtolower(trim($account->uid))).'?d=identicon&f=y&size='.$size,
      'path' => 'open_journal/avatar/'.md5(strtolower(trim($account->name))).'/'.$size.'.png',
      'width' => $size,
      'height' => $size,
      'alt' => $real_name,
      'title' => $real_name,
    ));
  }
  else {
    
    $picture = file_load(is_numeric($account->picture)? $account->picture: $account->picture->fid);
        
    $real_picture = theme('image_style', array(
      'style_name' => $image_style['name'],
      'path' => $picture->uri,
      'width' => $size,
      'height' => $size,
      'alt' => $real_name,
      'title' => $real_name,
    ));
  }
  
  $account->data = !is_array($account->data)? unserialize($account->data): $account->data;
  

  
  if ($variables['owner_uid'] == $account->uid) {
    $real_picture .= '<span class="owner-label">Owner</span>';
    $dummy_picture = '<span class="user-picture-wrapper">'.$dummy_picture.'<span class="owner-label">Owner</span></span>';
  }
  else {
    $dummy_picture = '<span class="user-picture-wrapper">'.$dummy_picture.'</span>';
    
  }
  
  $variables['picture_class'][] = 'user-picture-wrapper';
  $variables['name_class'][] = 'user-name-wrapper';
  
  $user_profile_url = drupal_get_destination();
  $user_profile_url = $user_profile_url['destination'];
    
  $real_picture = l($real_picture, $user_profile_url, array(
    'html' => TRUE, 
    'attributes' => array('class' => $variables['picture_class']),
    'fragment' => 'link-to-user-profile',
  ));
  
  $real_name_text = $real_name;
  $real_name = l($real_name, $user_profile_url, array(
    'attributes' => array('class' => $variables['name_class']),
    'fragment' => 'link-to-user-profile',
  ));
  
  
  
  
  // Prepare info to return
  $info_real = array(
    'display_picture' => $real_picture,
    'display_name' => $real_name,
    'display_name_text' =>  $real_name_text,
  );

  $info_dummy = array(
    'display_picture' => $dummy_picture,
    'display_name' => $dummy_name,
    'display_name_text' =>  $dummy_name_text,
  );
  

  
  
  // Check before return
  if (!isset($variables['user']) || !$variables['user']) {
    global $user;
  }
  else {
    $user = $variables['user'];
  }
  
  // Editor
  if (user_access('auto active when create journal')) {
    $info = $info_real;
  }    
  // Reviewer and librarian
  elseif (user_access('access contributor process') && !user_access('auto active when create journal')) {
    if (user_access('access contributor process', $account)) {
      $info = $info_real;
    }
    else {
      $info = $info_dummy;
    }
  }
  // Researcher
  else {
    if ($user->uid == $account->uid) {
      $info = $info_real;
    }
    else {
      $info = $info_dummy;
    }
  }
    
  return $info;

}

function open_journal_trim($text, $size=NULL) {

  $text = preg_replace( '/\s+/', ' ', strip_tags($text));
  if ($size) {
    $text = truncate_utf8($text, $size, TRUE ,TRUE ,TRUE);
  }
  return $text;
}

function open_journal_get_display_user_info_more() {
  return array('display_picture' => '...', 'display_name' => 'more people');
}



